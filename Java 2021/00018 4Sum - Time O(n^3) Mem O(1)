public List<List<Integer>> fourSum(int[] nums, int target) {
        if(nums.length < 4) return new ArrayList<>();
              
        //[-2,-1,-1, 1, 1, 2, 2]
        //     i  j  l        r
        // 
        List<List<Integer>> solution = new ArrayList<>(); 
        Arrays.sort(nums);
        for(int i = 0; i < nums.length-3; ++i) {
            //Skip duplicates - process the first non duplicate we see
            if(i > 0 && nums[i] == nums[i-1]) continue;
            //Check if a pair exists
            for(int j = i+1; j < nums.length-2; ++j) {
                //Skip duplicates - process the first non duplicate
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int l = j+1;
                int prevL = Integer.MAX_VALUE;
                int r = nums.length-1;
                int prevR = Integer.MAX_VALUE;
                while(l<r) {
                    int curSum = nums[i] + nums[j] + nums[l] + nums[r];
                    if(curSum == target && prevR != nums[r] && prevL != nums[l]) {
                        Integer[] arr = new Integer[]{nums[i], nums[j], nums[l], nums[r]};
                        solution.add(new ArrayList<>(Arrays.asList(arr)));
                    }
                    //Store previous number and update pointers
                    if(curSum < target) prevL = nums[l++];
                    else prevR = nums[r--];
                }
            }
        }
        return solution;
    }
