//Run Time: 0ms - 100.00%
//Memory Usage: 6.9MB - 96.08%
//Solved =)
//Time O(nm) Memory O(n)
class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>> dirs = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, 
                                    {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        vector<vector<int>> nextState(2, vector<int>(board[0].size(), 0));
        for(int i = 0; i < board.size(); ++i) {
            for(int j = 0; j < board[i].size(); ++j) {
                //Update to nextState
                if(i - 2 >= 0) board[i-2][j] = nextState[i%2][j];
                //Check neighbors
                int numNeighbors = 0;
                for(int d = 0; d < dirs.size(); ++d) {
                    //Bounds check
                    if(i + dirs[d][0] < 0 || i + dirs[d][0] >= board.size())
                        continue;
                    if(j + dirs[d][1] < 0 || j + dirs[d][1] >= board[i].size())
                        continue;
                    
                    if(board[i+dirs[d][0]][j+dirs[d][1]]) ++numNeighbors;
                }
                //Compute next state
                if(board[i][j]) {
                    if(numNeighbors < 2) nextState[i%2][j] = 0;
                    else if(numNeighbors > 3) nextState[i%2][j] = 0;
                    else nextState[i%2][j] = 1;
                }
                else if(numNeighbors == 3) nextState[i%2][j] = 1;
                else nextState[i%2][j] = 0;
                //cout << nextState[i%2][j] << " ";
            }
            //cout << endl;
        }
        //Update the final two rows of the board
        int startRow = max(0, (int)board.size() - 2);
        for(int i = 0; i < min((int)board.size(), 2); ++i) {
            for(int j = 0; j < board[i].size(); ++j) {
                board[startRow+i][j] = nextState[(startRow+i)%2][j];
            }
        }
    }
};
