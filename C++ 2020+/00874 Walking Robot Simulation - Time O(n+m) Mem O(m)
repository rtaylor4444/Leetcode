//Run Time: 160ms - 99.23%
//Memory Usage: 33MB - 99.74%
//Solved =)
//n = number of commands
//m = number of obstacles
//Time O(n+m) Memory O(m)
class Solution {
public:
    long posToLong(int x, int y) {
        unsigned int newX = (x >= 0) ? x : UINT_MAX + x + 1;
        unsigned int newY = (y >= 0) ? y : UINT_MAX + y + 1;
        long pos = 0 | newY;
        pos <<= 32;
        pos |= newX;
        return pos;
    }
    void rotateDir(int& x, int& y, int dir) {
        //left -> -2
        //north (x=0, y=1) -> west (x=-1, y=0)
        //west (x=-1, y=0) -> south (x=0, y=-1)
        //south (x=0, y=-1) -> east (x=1, y=0)
        //east (x=1, y=0) -> north (x=0, y=1) 
        //right -> -1
        //north (x=0, y=1) -> east (x=1, y=0)
        //west (x=-1, y=0) -> north (x=0, y=1)
        //south (x=0, y=-1) -> west (x=-1, y=0)
        //east (x=1, y=0) -> south (x=0, y=-1) 
        if(dir == -2) y *= -1;
        else if(dir == -1) x *= -1;
        swap(x, y);
    }
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        //robot starts 0,0
        //*directions 
        //north (x=0, y=1)
        //south (x=0, y=-1)
        //east (x=1, y=0)
        //west (x=-1, y=0)
        //*commands
        //-2: turn left 90
        //-1: turn right 90
        //1-9: move 1-9 units
        //*obstacles basically just invalidate movement if landing on one of them
        
        //simulate the commands
        //*Need as way to quickly check for obstacles
        //*hash or matrix
        //*Hash - Id have to find a way to hash both x and y
        //*Matrix - consume more memory and find bounds
        
        //Place Obstacles in hashset
        //long = y << 32 + x;
        unordered_set<long> obstacleSet;
        for(int i = 0; i < obstacles.size(); ++i) {
            obstacleSet.emplace(posToLong(obstacles[i][0], obstacles[i][1]));
        }
        //Simulate the process
        int x = 0, y = 0, dirX = 0, dirY = 1;
        int maxDist = 0;
        for(int i = 0; i < commands.size(); ++i) {
            if(commands[i] < 0) rotateDir(dirX, dirY, commands[i]);
            else {
                //Do movement
                for(int j = 0; j < commands[i]; ++j) {
                    if(obstacleSet.find(posToLong(x + dirX, y + dirY)) != obstacleSet.end()) {
                        break;
                    }
                    x += dirX;
                    y += dirY;
                    //get maximum from origin at any given time
                    maxDist = max(maxDist, (x*x) + (y*y));
                }
            }
        }
        //a^2 + b^2 = c^2 -> our distancce from origin
        return maxDist;
    }
};
