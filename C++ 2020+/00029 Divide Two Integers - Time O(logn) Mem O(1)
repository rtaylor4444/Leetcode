//Run Time: 4ms - 51.83%
//Memory Usage: 5.9MB - 28.27%
//Solved =)
//Time O(logn) Memory O(1)
class Solution {
public:
    int divide(int dividend, int divisor) {
        //Overflow catch
        if (dividend == INT_MIN && divisor == -1) return INT_MAX;
        //Convert numbers to negative since it has a wider range
        int ans = 0;
        int sign = -1;
        if(dividend > 0) {
            sign = -sign;
            dividend = -dividend;
        }
        if(divisor > 0) {
            sign = -sign;
            divisor = -divisor;
        }
        //dividend / divisor
        while(dividend <= divisor) {
            int numPower = -1;
            int curNum = divisor;
            //double numbers until we surpass dividend
            while(dividend - curNum < curNum) {
                curNum += curNum;
                numPower += numPower;
            }
            dividend -= curNum;
            ans += numPower;
        }
        return sign > 0 ? ans : -ans;
    }
};
