//Run Time: 28ms - 80.07%
//Memory Usage: 39.1MB - 96.28%
//Solved =)
//Time O(nlogn) Memory O(n)
class Solution {
    int low;
    vector<int> powerValues;
public:
    int getPower(int val) {
        int index = val - low;
        if(powerValues[index] != -1)
            return powerValues[index];
        
        int power = 0;
        while(val != 1) {
            if(val % 2) val = (3 * val) + 1;
            else val /= 2;
            ++power;
        }
        powerValues[index] = power;
        return power;
    }
    bool isOrderedBefore(int a, int b) {
        if(getPower(a) < getPower(b)) return true;
        else if(getPower(a) > getPower(b)) return false;
        return a < b;
    }
    int quickSort(vector<int>& values, int l, int r) {
        //Pick first element as the index
        int pivotIndex = l;
        ++l;
        while(l <= r) {
            bool leftBeforePivot = isOrderedBefore(values[l], values[pivotIndex]);
            if(leftBeforePivot)
                ++l;
            
            bool rightAfterPivot = !isOrderedBefore(values[r], values[pivotIndex]);
            if(rightAfterPivot)
                --r;
            
            if(!leftBeforePivot && !rightAfterPivot) {
                swap(values[l++], values[r--]);
            }
        }
        //Right should be located on the pivot if numbers are already sorted
        swap(values[pivotIndex], values[r]);
        return r;
    }
    int getKth(int lo, int hi, int k) {
        //Quickselect because we only need K
        low = lo;
        powerValues = vector<int>((hi - lo)+1, -1);
        vector<int> values((hi - lo)+1, 1);
        for(int i = lo; i <= hi; ++i)
            values[i-lo] = i;
        
        int sortedIndex = -1, startIndex = 0, endIndex = values.size() - 1;
        //K is 1 indexed so lets make it 0 indexed
        k-=1;
        while(sortedIndex != k) {
            sortedIndex = quickSort(values, startIndex, endIndex);
            if(sortedIndex > k) endIndex = sortedIndex-1;
            else if(sortedIndex < k) startIndex = sortedIndex+1;
        }
        return values[sortedIndex];
    }
};
