//Run Time: 132ms - 72.55%
//Memory Usage: 103.1MB - 28.58%
//Unoptimal Solution - Memory needs improvement
//Time O(n) Memory O(n)
class Solution {
public:
    int waysToMakeFair(vector<int>& nums) {
        //number of indexs to mkae array fair
        //Precalc even-odd sums
        //fair = odd sum == even sum
        //Brute Force ignore an index
        //and sum up even odds then check
        //[6,1,7,4,1]
        //forward even sum = [6,1,13,5,14]
        //backward odd sum = [14,5,8,4,1]
        //0 -> [1,7,4,1] 5 vs 8
        //1 -> [6,7,4,1] 10 vs 8
        //2 -> [6,1,4,1] 10 vs 2
        //3 -> [6,1,7,1] 13 vs 2
        //4 -> [6,1,7,4] 13 vs 5
        //Precalc forward and backward sum
        vector<int> forward(nums.size(), 0);
        for(int i = 0; i < nums.size(); ++i) {
            forward[i] = nums[i];
            if(i-2 >= 0) forward[i] += forward[i-2];
        }
        vector<int> backward(nums.size(), 0);
        for(int i = backward.size() - 1; i >= 0; --i) {
            backward[i] = nums[i];
            if(i+2 < nums.size()) backward[i] += backward[i+2];
        }
        //Get ways to make fair
        int numWays = 0;
        for(int i = 0; i < nums.size(); ++i) {
            int newSum1 = (i-1 >= 0) ? forward[i-1] : 0;
            newSum1 += (i+2 < nums.size()) ? backward[i+2] : 0;
            int newSum2 = (i-2 >= 0) ? forward[i-2] : 0;
            newSum2 += (i+1 < nums.size()) ? backward[i+1] : 0;
            if(newSum1 == newSum2) ++numWays;
        }
        return numWays;
    }
};
