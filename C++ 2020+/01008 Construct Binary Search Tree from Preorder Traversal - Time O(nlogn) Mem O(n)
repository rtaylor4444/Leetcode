//Run Time: 4ms - 89.53%
//Memory Usage: 13.2MB - 7.37%
//Unoptimal Solution - Time needs improvement
//Time O(nlogn) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void insertNode(TreeNode* root, TreeNode* node) {
        TreeNode* curNode = root, *prevNode = nullptr;
        while(curNode) {
            prevNode = curNode;
            if(curNode->val > node->val)
                curNode = curNode->left;
            else
                curNode = curNode->right;
        }
        
        if(prevNode->val > node->val)
            prevNode->left = node;
        else
            prevNode->right = node;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        if(preorder.empty()) return nullptr;
        TreeNode* root = new TreeNode(preorder[0]);
        for(int i = 1; i < preorder.size(); ++i) {
            insertNode(root, new TreeNode(preorder[i])); 
        }
        return root;
    }
};
