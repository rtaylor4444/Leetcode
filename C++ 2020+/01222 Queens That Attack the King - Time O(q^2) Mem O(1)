//Run Time: 8ms - 69.38%
//Memory Usage: 11.2MB - 22.29%
//Solved =)
//Time O(q^2) Memory O(1)
class Solution {
public:
    bool canAttack(vector<int>& q_pos, vector<vector<bool>>& chessboard, vector<int>& k_pos) {
        //Row check
        if(k_pos[0] == q_pos[0]) {
            int dir = (k_pos[1] > q_pos[1]) ? 1 : -1;
            for(int i = q_pos[1] + dir; i != k_pos[1]; i+=dir) {
                if(chessboard[q_pos[0]][i]) return false;
            }
            return true;
        }
        //Column check
        if(k_pos[1] == q_pos[1]) {
            int dir = (k_pos[0] > q_pos[0]) ? 1 : -1;
            for(int i = q_pos[0] + dir; i != k_pos[0]; i+=dir) {
                if(chessboard[i][q_pos[1]]) return false;
            }
            return true;
        }
        //Diagnol check
        if(abs(k_pos[0] - q_pos[0]) == abs(k_pos[1] - q_pos[1])) {
            int dirY = (k_pos[0] > q_pos[0]) ? 1 : -1;
            int dirX = (k_pos[1] > q_pos[1]) ? 1 : -1;
            int posY = q_pos[0], posX = q_pos[1];
            while(posY != k_pos[0] && posX != k_pos[1]) {
                posY += dirY;
                posX += dirX;
                if(chessboard[posY][posX]) return false;
            }
            return true;
        }
        return false;
    }
    vector<vector<int>> queensAttacktheKing(vector<vector<int>>& queens, vector<int>& king) {
        //check if the queen can hit the king
        //check if there are no queens in the path
        //Make a chessboard and fill with queens
        vector<vector<bool>> chessboard(8, vector<bool>(8, false)); 
        for(int i = 0; i < queens.size(); ++i) {
            chessboard[queens[i][0]][queens[i][1]] = true;
        }
        //Check if the queen can attack the king
        vector<vector<int>> queenList;
        for(int i = 0; i < queens.size(); ++i) {
            if(canAttack(queens[i], chessboard, king))
                queenList.push_back(queens[i]);
        }
        return queenList;
    }
};
