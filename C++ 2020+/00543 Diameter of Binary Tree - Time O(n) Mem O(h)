//Run Time: 28ms - 24.92%
//Memory Usage: 20.9MB - 37.94%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxDiameter;
public:
    int postOrder(TreeNode* node) {
        int left = (node->left) ? postOrder(node->left) + 1 : 0;
        int right = (node->right) ? postOrder(node->right) + 1: 0;
        maxDiameter = max(maxDiameter, left + right);
        return max(left, right);
    }
    int diameterOfBinaryTree(TreeNode* root) {
        //postOrder recursion backtracking
        maxDiameter = 0;
        if(root) postOrder(root);
        return maxDiameter;
    }
};
