//Run Time: 8ms - 27.20%
//Memory Usage: 8MB - 37.30%
//Unoptimal Solution - Memory/Time needs improvement
//Time O(n^2) Memory O(n^2)
class Solution {
public:
    int getMaxScore(vector<vector<int>>& dp, vector<int>& nums, 
                    int start, int end, int turn) {
        if(start > end) return 0;
        if(dp[start][end] != INT_MIN) return dp[start][end];
        
        //test first choice
        int choice1 = nums[start] * turn;
        //cout << "testing 1st choice: " << start+1 << " -> " << end << endl;
        choice1 += getMaxScore(dp, nums, start+1, end, -turn);
        
        //test second choice
        int choice2 = nums[end] * turn;
        //cout << "testing 2nd choice: " << start << " -> " << end-1 << endl;
        choice2 += getMaxScore(dp, nums, start, end-1, -turn);
        
        //max on player1's turn min on player2's turn
        // 3 vs 2 max = 3
        // min 2 - mult -1 to sim min
        dp[start][end] = turn * max(choice1 * turn, choice2 * turn);
        //cout << "dp[" << start <<"][" << end << "] = " << dp[start][end] << endl;
        return dp[start][end];
    }
    bool PredictTheWinner(vector<int>& nums) {
        //Recursive backtracking function
        //try all the possible options        
        //dp[start][end] = maxScore
        vector<vector<int>> dp(nums.size(), vector<int>(nums.size(), INT_MIN));
        int ourScore = getMaxScore(dp, nums, 0, nums.size() - 1, 1);
        return (ourScore >= 0);
    }
};
