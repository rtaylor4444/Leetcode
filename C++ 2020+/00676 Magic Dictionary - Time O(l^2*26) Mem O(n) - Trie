//Run Time: 204ms - 42.72%
//Memory Usage: 111.5MB - 35.03%
//Solved =)
//n = number of words
//l length of longest word
//Time O(l^2*26) Memory O(n)
struct TrieNode {
    bool isWord;
    vector<TrieNode*> children;
    TrieNode() {
        children = vector<TrieNode*>(26, nullptr);
        isWord = false;
    }
    ~TrieNode() {
        for(int i = 0; i < children.size(); ++i) {
            if(children[i] == nullptr) continue;
            delete children[i];
        }
    }
};

class Trie {
    TrieNode *root, *cur;
public:
    Trie() {
        root = new TrieNode;
    }
    ~Trie() {
        delete root;
    }
    
    void addWord(string& s) {
        cur = root;
        for(int i = 0; i < s.size(); ++i) {
            if(!cur->children[s[i] - 'a'])
                cur->children[s[i] - 'a'] = new TrieNode();
            
            cur = cur->children[s[i] - 'a'];
        }
        cur->isWord = true;
    }
    
    bool search(string& query, char prev) {
        //iterate until '*'
        int curIndex;
        cur = root;
        for(curIndex = 0; curIndex < query.size(); ++curIndex) {
            if(query[curIndex] == '*') break;
            if(!cur->children[query[curIndex] - 'a']) return false;
            cur = cur->children[query[curIndex] - 'a'];
        }
        
        //try every possible node at cur position
        TrieNode *start = cur;
        int startIndex = curIndex;
        for(int i = 0; i < 26; ++i) {
            cur = start;
            if(!cur->children[i]) continue;
            //skip matching character
            if(prev == 'a'+i) continue;
            //Pick that character
            cur = cur->children[i];
            curIndex = startIndex+1;
            //search this node
            bool foundWord = false;
            for(curIndex; curIndex < query.size(); ++curIndex) {
                if(!cur->children[query[curIndex] - 'a']) break;
                cur = cur->children[query[curIndex] - 'a'];
            }
            if(curIndex == query.size() && cur->isWord) return true;
        }
        return false;
    }
};

class MagicDictionary {
    Trie trie;
public:
    /** Initialize your data structure here. */
    MagicDictionary() {
        
    }
    
    void buildDict(vector<string> dictionary) {
        for(int i = 0; i < dictionary.size(); ++i) {
            trie.addWord(dictionary[i]);
        }
    }
    
    bool search(string searchWord) {
        /* fails
        */
        for(int i = 0; i < searchWord.size(); ++i) {
            //mark character we can possible change
            char prev = searchWord[i];
            searchWord[i] = '*';
            if(trie.search(searchWord, prev)) return true;
            searchWord[i] = prev;
        }
        return false;
    }
};

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary* obj = new MagicDictionary();
 * obj->buildDict(dictionary);
 * bool param_2 = obj->search(searchWord);
 */
