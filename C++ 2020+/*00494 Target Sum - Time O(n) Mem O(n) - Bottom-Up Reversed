//Run Time: 40ms - 59.95%
//Memory Usage: 38.4MB - 28.93%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        //every step has two choices either sub or add that number
        //dp[index][curNum] = num ways to reach target
        int size = nums.size();
        vector<vector<int>> dp(size, vector<int>(2001, 0));
        //Start with the target and build up
        dp[0][nums[0] + 1000] = 1;
        dp[0][-nums[0] + 1000] += 1;
        for(int i = 1; i < size; ++i) {
            for(int j = -1000; j < 1001; ++j) {
                if(dp[i-1][j+1000] == 0) continue;
                dp[i][j + 1000 + nums[i]] += dp[i-1][j+1000];
                dp[i][j + 1000 - nums[i]] += dp[i-1][j+1000];
            }
        }
        return S > 1000 ? 0 : dp[size-1][S + 1000];
    }
};
