//Run Time: 24ms - 87.62%
//Memory Usage: 23.8MB - 49.65%
//Solved =)
//Time O(n) Memory O(1)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int totalTilt;
public:
    int tiltHelper(TreeNode* node) {
        int leftVal = (node->left) ? tiltHelper(node->left) : 0;
        int rightVal = (node->right) ? tiltHelper(node->right) : 0;
        totalTilt += abs(leftVal - rightVal);
        return node->val + leftVal + rightVal;
    }
    int findTilt(TreeNode* root) {
        if(root == nullptr)
            return 0;
        
        totalTilt = 0;
        tiltHelper(root);
        return totalTilt;
    }
};
