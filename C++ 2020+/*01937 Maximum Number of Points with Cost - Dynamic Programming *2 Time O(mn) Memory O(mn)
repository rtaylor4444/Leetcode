//Run Time: 285ms - 16.58%
//Memory Usage: 129.53MB - 17.59%
//Solved =)
//Time O(mn) Memory O(mn)

class Solution {
public:
    long long maxPoints(vector<vector<int>>& points) {
        //Dynamic Programming *2 - O(m * n)
        //difference of the columns needs to be deducted
        vector<vector<long long>> dp(points.size(), vector<long long>(points[0].size(), 0));
        //initial row is always equal to itself
        long long maxPoints = 0;
        for(int i = 0; i < points[0].size(); ++i) dp[0][i] = points[0][i];
        //Every other cells maximum points must be calced 
        for(int i = 1; i < points.size(); ++i) {
            //Precompute our possible options to pick
            vector<long long> leftDP2(points[i].size(), 0), rightDP2(points[i].size(), 0);

            //Calculate possible left values to pick
            leftDP2[0] = dp[i-1][0];
            for(int j = 1; j < points[i].size(); ++j) 
                leftDP2[j] = max(leftDP2[j-1]-1, dp[i-1][j]);

            //Calculate possible right values to pick
            rightDP2[rightDP2.size()-1] = dp[i-1].back();
            for(int j = rightDP2.size()-2; j >= 0; --j) 
                rightDP2[j] = max(rightDP2[j+1]-1, dp[i-1][j]); 

            //pick the previous cell that gives the most points
            for(int j = 0; j < points[i].size(); ++j) 
                dp[i][j] = points[i][j] + max(leftDP2[j], rightDP2[j]);
        }
        //Get max points
        for(int i = 0; i < points[0].size(); ++i) maxPoints = max(maxPoints, dp[points.size()-1][i]);
        return maxPoints;
    }
};
