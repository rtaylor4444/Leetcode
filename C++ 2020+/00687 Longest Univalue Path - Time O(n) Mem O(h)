//Run Time: 192ms - 66.71%
//Memory Usage: 72.7MB - 5.21%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxUniValue;
public:
    int univalueHelper(TreeNode* node, int curVal) {
        if(node == nullptr) return 0;
        //postOrder
        int leftDepth = univalueHelper(node->left, node->val);
        int rightDepth = univalueHelper(node->right, node->val);
        maxUniValue = max(maxUniValue, leftDepth + rightDepth);
        //Pick which ever path is more we cannot do curves
        return (node->val == curVal) ? max(leftDepth,  rightDepth) + 1 : 0;
    } 
    int longestUnivaluePath(TreeNode* root) {
        //Recursion since we have to search the entire tree anyway
        maxUniValue = 0;
        //Ensure its not the roots value when we call function
        if(root != nullptr) univalueHelper(root, root->val - 1);
        return maxUniValue;
    }
};
