//Run Time: 20ms - 29.00%
//Memory Usage: 14.7MB - 5.00%
//Unoptimal Solution - Time/Memory needs improvement
//Time O(n^2) Memory O(n)
class Trie {
    struct TrieNode {
        TrieNode* children[26];
        bool isWord;
        TrieNode() {
            isWord = false;
            for(int i = 0; i < 26; ++i) {
                children[i] = nullptr;
            }
        }
        ~TrieNode() {
            for(int i = 0; i < 26; ++i) {
                if(children[i]) delete children[i];
            }
        }
    };
    TrieNode* root;
public:
    Trie() {
        root = new TrieNode();
    }
    ~Trie() {
        delete root;
    }
    
    void putWord(string word) {
        TrieNode* curNode = root;
        for(int i = 0; i < word.size(); ++i) {
            if(!curNode->children[word[i] - 'a'])
                curNode->children[word[i] - 'a'] = new TrieNode();
            
            curNode = curNode->children[word[i] - 'a'];
        }
        curNode->isWord = true;
    }
    
    vector<int> isinTrie(int start, int end, string word) {
        TrieNode* curNode = root;
        vector<int> matchingIndices;
        for(int i = start; i < end; ++i) {
            if(!curNode->children[word[i] - 'a'])
                break;
            
            curNode = curNode->children[word[i] - 'a'];
            if(curNode->isWord) matchingIndices.push_back(i);
        }
        return matchingIndices;
    }
};

class Solution {
public:
    vector<string> stringMatching(vector<string>& words) {
        //Put words in a trie
        Trie trie;
        for(int i = 0; i < words.size(); ++i) {
            trie.putWord(words[i]);
        }
        //Afterward check each char for each word and see if we find a match
        unordered_set<string> uniqueWords;
        for(int i = 0; i < words.size(); ++i) {
            for(int j = 0; j < words[i].size(); ++j) {
                //cout << "substring is: " << words[i].substr(j, words[i].size() - j) << endl;
                vector<int> searchResult = trie.isinTrie(j, words[i].size(), words[i]);
                for(int k = 0; k < searchResult.size(); ++k) {
                    string curString = words[i].substr(j, searchResult[k] - j + 1);
                    if(curString == words[i]) continue;
                    //cout << searchResult[k] << " added: " << curString << endl;
                    uniqueWords.emplace(curString);
                }
            }
        }
        vector<string> matches(uniqueWords.begin(), uniqueWords.end());
        return matches;
    }
};
