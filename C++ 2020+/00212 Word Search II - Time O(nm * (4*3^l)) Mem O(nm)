//Run Time: 0ms - 100.00%
//Memory Usage: 9.7MB - 11.58%
//Solved =)
//l = length of word
//
//Time O(nm * (4*3^l)) Memory O(nm)
class BoggleTrie {
	struct TrieNode {
		TrieNode* parent;
		unordered_map<char, TrieNode*> children;
		bool isWord;
		TrieNode(TrieNode* p) {
			parent = p;
			isWord = false;
		}
	};
	
	TrieNode* root, *curNode;
	string curString;
	unordered_set<string> dupCheck;
	vector<vector<bool>> visitedNodes;
	vector<string> solution;
public:
	BoggleTrie() {
		root = new TrieNode(nullptr);
		curNode = nullptr;
	}
	~BoggleTrie() {
		delete root;
	}
	
	void addWord(string& word) {
		curNode = root;
		for(int i = 0; i < word.size(); ++i) {
			if(curNode->children.find(word[i]) == curNode->children.end())
				curNode->children.emplace(word[i], new TrieNode(curNode));
			
			curNode = curNode->children[word[i]];
		}
		curNode->isWord = true;
	}
	//Check to see if a letter exists based on curNode's position
	bool peekLetter(char c) {
		return curNode->children.find(c) != curNode->children.end();
	}
	bool isInBounds(int x, int y, vector<vector<char>>& board) {
		return !(y < 0 || x < 0 || y >= board.size() || x >= board[y].size());
	}
	void traverseTo(int x, int y, vector<vector<char>>& board) {
		if(isInBounds(x, y, board) && !visitedNodes[y][x] &&
			 peekLetter(board[y][x])) {
			//cout << "traversing to: " << y << " " << x;
			//cout << " " << board[y][x] << endl;
			
			curNode = curNode->children[board[y][x]];
			checkPossibleWords(x, y, board);
			//Undo changes
            //check if current node is a leaf if it is we have searched
            //this word so remove it
            TrieNode* parent = curNode->parent;
            if(curNode->children.empty() && curNode != root) {
                parent->children.erase(board[y][x]);
                delete curNode;
            }
			curNode = parent;
			curString.pop_back();
		}
	}
	bool isInTrie(string& word) {
		curNode = root;
		for(int i = 0; i < word.size(); ++i) {
			if(curNode->children.find(word[i]) == curNode->children.end())
				return false;
			
			curNode = curNode->children[word[i]];
		}
		return curNode->isWord;
	}
	void checkPossibleWords(int x, int y, vector<vector<char>>& board) {
		char curChar = board[y][x];
		curString += curChar;
        
		visitedNodes[y][x] = true;
		//cout << "our string is: " << curString << endl;
		//Check if our word is in the trie and not a duplicate
		if(isInTrie(curString) && dupCheck.find(curString) == dupCheck.end()) {
			solution.push_back(curString);
			dupCheck.emplace(curString);
			//cout << "ADDED SOLUTION" << endl;
		}
		
		//Top
		traverseTo(x, y - 1, board);
		
		//Left
		traverseTo(x - 1, y, board);
		
		//Right
		traverseTo(x + 1, y, board);
		
		//Bottom
		traverseTo(x, y + 1, board);
		
		visitedNodes[y][x] = false;
	}
	vector<string>& solve(vector<vector<char>>& board) {
		visitedNodes.clear();
		for(int i = 0; i < board.size(); ++i) {
			visitedNodes.push_back(vector<bool>(board[i].size(), false));
		}
		
		for(int i = 0; i < board.size(); ++i) {
			for(int k = 0; k < board[i].size(); ++k) {
				//If current character is not in the trie don't search
				curNode = root;
				if(!peekLetter(board[i][k])) continue;
				//cout << "STARING SEARCH AT: " << board[i][k] << endl;
				curString.erase();
				checkPossibleWords(k, i, board);
			}
	  }
		return solution;
	}
};

class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        //Step 1: Place all of our words in a Trie for quick look up times
        //Step 2: I will need a way to efficiently traverse through my
        //Trie; so I will need to store parent nodes to iterate up and
        //down the tree in an efficient manner
        //Step 3: Writed a backtracking function that traverses the board
        //like a graph testing every path possible
        BoggleTrie dictionary;
        for(int i = 0; i < words.size(); ++i) {
            dictionary.addWord(words[i]);
        }

        return dictionary.solve(board);
    }
};
