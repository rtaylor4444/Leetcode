//Run Time: 12ms - 92.11%
//Memory Usage: 10.5MB - 10.45%
//Solved =)
//Time O(m * n) Memory O(n+m)
class Solution {
public:
    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {
        //get row max and col max
        vector<int> rowMax(grid.size(), 0);
        vector<int> colMax(grid[0].size(), 0);
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                rowMax[i] = max(rowMax[i], grid[i][j]);
                colMax[j] = max(colMax[j], grid[i][j]);
            }
        }
        //Calculate total sum
        int totalSum = 0;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                int maxValue = min(rowMax[i], colMax[j]);
                totalSum += max(0, maxValue - grid[i][j]);
            }
        }
        return totalSum;
    }
};
