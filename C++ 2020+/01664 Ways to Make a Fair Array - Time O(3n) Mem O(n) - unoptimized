//Run Time: 412ms - 16.00%
//Memory Usage: 103.5MB - 41.11%
//Unoptimal Solution - Time/Memory needs improvement
//Time O(3n) Memory O(n)
class Solution {
public:
    int waysToMakeFair(vector<int>& nums) {
        //Get precalced sums
        //states we need are even sum and odd sum
        vector<int> prefixSum(nums.size(), 0), suffixSum(nums.size(), 0);
        //Calc prefix sum
        for(int i = 0; i < nums.size(); ++i) {
            int prevSum = (i - 2 >= 0) ? prefixSum[i-2] : 0;
            prefixSum[i] = nums[i] + prevSum;
        }
        //Calc suffix sum
        for(int i = nums.size() - 1; i >= 0; --i) {
            int prevSum = (i + 2 < nums.size()) ? suffixSum[i+2] : 0;
            suffixSum[i] = nums[i] + prevSum;
        }
        
        int numFair = 0;
        for(int i = 0; i < nums.size(); ++i) {
            //get prefix sum
            int evenIndex = (i % 2 == 0) ? i - 2 : i - 1;
            int oddIndex = (i % 2 == 0) ? i - 1 : i - 2;
            int evenSum = (evenIndex >= 0) ? prefixSum[evenIndex] : 0;
            int oddSum = (oddIndex >= 0) ? prefixSum[oddIndex] : 0;
            //get suffixSum
            //flip parity
            evenIndex = (evenIndex == i-2) ? i+1 : i+2;
            oddIndex = (oddIndex == i-2) ? i+1 : i+2;
            evenSum += (evenIndex < nums.size()) ? suffixSum[evenIndex] : 0;
            oddSum += (oddIndex < nums.size()) ? suffixSum[oddIndex] : 0;
            if(evenSum == oddSum) ++numFair;
        }
        return numFair;
    }
};
