//Run Time: 44ms - 97.12%
//Memory Usage: 14.6MB - 79.10%
//Solved =)
//Time O(n) Memory O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //Iterate through the LinkedList once
        //One one list reaches its end place it at the begining of the other list
        //If we find a match return it
        //basically Two Pass solution
        ListNode *nodeA = headA, *nodeB = headB;
        while(nodeA && nodeB) {
            if(nodeA == nodeB) return nodeA;
            nodeA = nodeA->next;
            //Mark each reset head as used by setting null
            if(!nodeA && headB) {
                nodeA = headB;
                headB = nullptr;
            } 
            nodeB = nodeB->next;
            if(!nodeB && headA) {
                nodeB = headA;
                headA = nullptr;
            } 
        }
        return nullptr;
    }
};
