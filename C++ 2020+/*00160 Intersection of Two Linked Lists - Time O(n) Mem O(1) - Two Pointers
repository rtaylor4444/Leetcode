//Run Time: 44ms - 97.12%
//Memory Usage: 14.6MB - 79.10%
//Solved =)
//Time O(n) Memory O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //O(1)
        //Two Pointers
        if(headA == nullptr || headB == nullptr) return nullptr;
        
        ListNode *p1 = headA, *p2 = headB, *finalNode = nullptr;
        while(p1 != p2) {
            //Advance pointers and repeat at start of the other list
            p1 = p1->next;
            if(p1 == nullptr) p1 = headB;
            p2 = p2->next;
            if(p2 == nullptr) p2 = headA;
            
            //Found intersection if pointers match
            if(p1 == p2)
                break;
            
            //Set final node to last node in the list
            if(p1->next == nullptr || p2->next == nullptr) {
                //Both lists are same length and don't intersect
                if(p1->next == p2->next) return nullptr;
                ListNode* curLast = (p1->next) ? p2 : p1;
                if(!finalNode) finalNode = curLast;
                else if(finalNode != curLast) return nullptr;
            }
        }
        return p1;
    }
};
