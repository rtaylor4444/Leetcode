//Run Time: 32ms - 32.15%
//Memory Usage: 5.9MB - 56.86%
//Solved =)
//Time O(h) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    TreeNode *curNode;
    stack<TreeNode*> inOrder;
public:
    BSTIterator(TreeNode* root) {
        curNode = root;
    }
    
    int next() {
        //Populate Stack
        while(curNode) {
            inOrder.push(curNode);
            curNode = curNode->left;
        }
        //Process Node
        curNode = inOrder.top();
        int val = curNode->val;
        inOrder.pop();
        curNode = curNode->right;
        return val;
    }
    
    bool hasNext() {
        return curNode || !inOrder.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
