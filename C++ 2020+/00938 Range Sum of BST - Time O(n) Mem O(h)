/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//Run Time: 200ms - 92.74%
//Memory Usage: 65.1MB - 8.16%
//Solved =)
//n = number of nodes
//h = height of the tree
//*Its possible to traverse all of the nodes since they
//all can be within the range so we assume worst-case
//Time O(n) Memory O(h)
class Solution {
public:
    int rangeSumBST(TreeNode* root, int L, int R) {
        //Use DFS preorder to traverse the tree and add
        //nodes that fall within the range
        int rangeSum = 0;
        stack<TreeNode*> preorder;
        TreeNode* curNode;
        preorder.push(root);
        while(!preorder.empty()) {
            curNode = preorder.top();
            preorder.pop();
            
            //Add our value if it falls within the range
            if(curNode->val >= L && curNode->val <= R)
                rangeSum += curNode->val;
            
            //If our value is less than or equal to L dont traverse left
            if(curNode->left && curNode->val > L) 
                preorder.push(curNode->left);
            //If our value is greater than or equal to R dont traverse right
            if(curNode->right && curNode->val < R)
                preorder.push(curNode->right);
        }
        return rangeSum;
    }
};
