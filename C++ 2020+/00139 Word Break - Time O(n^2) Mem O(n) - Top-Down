//Run Time: 12ms - 66.66%
//Memory Usage: 28.6MB - 5.07%
//Unoptimal Solution - Time/Memory needs improvement
//Time O(n^2) Memory O(n)
class Trie {
    struct TrieNode {
        vector<TrieNode*> children;
        bool isWord;
        TrieNode() {
            isWord = false;
            children = vector<TrieNode*>(256, nullptr);
        }
        ~TrieNode() {
            for(int i = 0; i < children.size(); ++i) {
                delete children[i];
            }
        }
    };
    TrieNode *root, *curNode;
public:
    Trie() {
        root = new TrieNode();
    }
    void addWords(vector<string>& words) {
        for(int i = 0; i < words.size(); ++i) {
            addWord(words[i]);
        }
    }
    void addWord(string& word) {
        curNode = root;
        for(int i = 0; i < word.size(); ++i) {
            if(curNode->children[word[i]] == nullptr) {
                curNode->children[word[i]] = new TrieNode();
            }
            curNode = curNode->children[word[i]];
        }
        curNode->isWord = true;
    }
    int findWord(string& word, int start, int end) {
        curNode = root;
        for(int i = start; i < end; ++i) {
            if(curNode->children[word[i]] == nullptr) 
                return false;
            
            curNode = curNode->children[word[i]];
        }
        return curNode->isWord;
    }
};
class Solution {
public:
    int recursive(Trie& trie, vector<int>& dp, string& s,
                  int start) {
        if(start >= s.size()) return 1;
        if(dp[start] != -1) return dp[start];
        int canFormWord = 0, startPos = start;
        for(int i = start; i < s.size(); ++i) {
            if(!trie.findWord(s, startPos, i+1))
                continue;
            
            canFormWord = recursive(trie, dp, s, i+1);
            if(canFormWord) break;
        }
        dp[start] = canFormWord;
        return canFormWord;
    }
    bool wordBreak(string s, vector<string>& wordDict) {
        //test all possibilities
        //place space at every possibile position and test for a word
        //Words can be placed in a trie for quick lookup
        Trie trie;
        trie.addWords(wordDict);
        //dp[substring start][substring end] = can be broken up to space-sep
        //values  1 = true, 0 = false, -1 = undetermined
        vector<int> dp(s.size()+1, -1);
        recursive(trie, dp, s, 0);
        return dp[0] > 0;
    }
};
