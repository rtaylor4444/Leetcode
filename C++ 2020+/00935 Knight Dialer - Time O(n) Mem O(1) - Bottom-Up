//Run Time: 236ms - 52.20%
//Memory Usage: 29.2MB - 40.11%
//Solved =)
//Time O(n) Memory O(1)
class Solution {
    int mod;
    vector<vector<int>> choices;
public:
    Solution() {
        mod = 1000000007;
        choices = {{4,6}, {6,8}, {7,9}, {4,8}, {0,3,9}, {}, {0,1,7}, {2,6}, {1,3}, {2,4}};
    }
    int knightDialer(int n) {
        //0 => 4, 6
        //1 => 6, 8
        //2 => 7, 9
        //3 => 4, 8
        //4 => 0, 3, 9
        //5 => -
        //6 => 0, 1, 7
        //7 => 2, 6
        //8 => 1, 3
        //9 => 2, 4
        //5 can only be used if n == 1
        //Backtrack recursive
        //every time we make a jump we have 2-3 choices
        //states: n and number picked
        //dp[n][number] = numbers dialed
        long totalMoves = 0;
        //set base cases
        vector<int> dp(10, 1);
        //calc 1-n only using two rows of our table(all thats needed)
        for(int i = 1; i < n; ++i) {
            vector<int> tempDP(dp);
            for(int j = 0; j < 10; ++j) {
                totalMoves = 0;
                for(int c = 0; c < choices[j].size(); ++c) {
                    totalMoves += tempDP[choices[j][c]];
                    totalMoves %= mod;
                }
                dp[j] = totalMoves;
            }
        }
        totalMoves = 0;
        for(int i = 0; i < 10; ++i) {
            totalMoves += dp[i] % mod;
            totalMoves %= mod;
        }
        return (int)totalMoves;
    }
};
