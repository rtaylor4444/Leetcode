//Run Time: 8ms - 99.74%
//Memory Usage: 14.3MB - 25.33%
//Solved =)
//Constructor - Time O(n) Memory O(n)
//next() - Time O(1) Memory O(1)
//hasNext() - Time O(1) Memory O(1)
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */

class NestedIterator {
    int curIndex;
    vector<int> list;
    void flattenNested(NestedInteger& nested) {
        if(nested.isInteger()) {
            list.push_back(nested.getInteger());
        }
        else {
            vector<NestedInteger> nestedList = nested.getList();
            for(int i = 0; i < nestedList.size(); ++i) {
                flattenNested(nestedList[i]);
            }
        }
    }
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        //Use recursion to flatten the list
        //then just simply iterate through it;
        curIndex = 0;
        for(int i = 0; i < nestedList.size(); ++i) {
            flattenNested(nestedList[i]);
        }
    }
    
    int next() {
        return (hasNext()) ? list[curIndex++] : - 1;
    }
    
    bool hasNext() {
        return curIndex < list.size();
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
