//Run Time: 48ms - 18.37%
//Memory Usage: 13.3MB - 5.13%
//Unoptimal Solution - Memory needs improvement
//Time O(nm) Memory O(nm)
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        //each cell has up and left info
        //We can then check diagonally to verify the square
        //making each query linear time
        //Or pre calc above to make each
        vector<vector<int>> up(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i = 0; i < matrix[0].size(); ++i) {
            int consec1 = 0;
            for(int j = 0; j < matrix.size(); ++j) {
                if(matrix[j][i] == '1') ++consec1;
                else if(matrix[j][i] == '0') consec1 = 0;
                up[j][i] = consec1;
            }
        }
        
        vector<vector<int>> left(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i = 0; i < matrix.size(); ++i) {
            int consec1 = 0;
            for(int j = 0; j < matrix[i].size(); ++j) {
                if(matrix[i][j] == '1') ++consec1;
                else if(matrix[i][j] == '0') consec1 = 0;
                left[i][j] = consec1;
            }
        }
        
        //diagonal update
        int maxSquare = 0;
        vector<vector<int>> maxSqs(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i = 0; i < matrix.size(); ++i) {
            for(int j = 0; j < matrix[i].size(); ++j) {
                if(matrix[i][j] == '0') continue;
                //If prev diagonal cell doesnt exist we must be size 1
                if(i-1 < 0 || j-1 < 0) {
                    maxSqs[i][j] = 1;
                }
                else {
                    int sqLength = min(up[i][j], left[i][j]);
                    int prevSqLength = maxSqs[i-1][j-1];
                    maxSqs[i][j] = min(prevSqLength+1, sqLength);
                }
                maxSquare = max(maxSquare, maxSqs[i][j] * maxSqs[i][j]);
            }
        }
        return maxSquare;
    }
};
