//Run Time: 536ms - 50.54%
//Memory Usage: 5.9MB - 66.31%
//Solved =)
//Time O(logc*(n*m + c)) Memory O(n*m)

class Solution {
    vector<vector<int>> dir;
public:
    Solution() {
        dir.push_back({1, 0});
        dir.push_back({-1, 0});
        dir.push_back({0, 1});
        dir.push_back({0, -1});
    }
    bool isValid(vector<vector<int>>& grid, int i, int j) {
        if(i < 0 || j < 0) return false;
        if(i >= grid.size() || j >= grid[i].size()) return false;
        return grid[i][j] != 1;
    }
    bool dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int i, int j) {
        visited[i][j] = true;
        //exit if we hit the final row
        if(i == grid.size()-1) return true;
        for(int d = 0; d < dir.size(); ++d) {
            int iNext = i + dir[d][0];
            int jNext = j + dir[d][1];
            if(!isValid(grid, iNext, jNext)) continue;
            if(visited[iNext][jNext]) continue;
            if(dfs(grid, visited, iNext, jNext)) return true;
        }
        return false;
    }
    void fixGrid(vector<vector<int>>& grid, vector<vector<int>>& cells, int m, int mPrev) {
        //cout << "m: " << m << " mPrev: " << mPrev << endl;
        if(m > mPrev) {
            //forward loop
            for(int i = mPrev; i < m; ++i) {
                grid[cells[i][0]-1][cells[i][1]-1] = 1;
            }
        } else if(m < mPrev) {
            //backward loop
            for(int i = m; i < mPrev; ++i) {
                grid[cells[i][0]-1][cells[i][1]-1] = 0;
            }
        }
    }
    int latestDayToCross(int row, int col, vector<vector<int>>& cells) {
        //Binary Search + DFS
        vector<vector<int>> grid(row, vector<int>(col, 0));
        int latestDay = 0, l = 0, r = cells.size()-1, mPrev = 0;
        while(l <= r) {
            int m = l + ((r-l)/2);
            //cout << l << " - " << m << " - " << r << endl;
            fixGrid(grid, cells, m, mPrev);

            //Traverse the grid and color the reachable cells from the top row
            bool canCross = false;
            vector<vector<bool>> visited(row, vector<bool>(col, false));
            for(int j = 0; j < col; ++j) {
                if(visited[0][j]) continue;
                if(grid[0][j] == 1) continue;
                //Check if we reached the other side
                if(dfs(grid, visited, 0, j)) {
                    canCross = true;
                    break;
                }
            }

            // cout << "grid: " << endl;
            // for(int i = 0; i < row; ++i) {
            //     for(int j = 0; j < col; ++j) {
            //         cout << grid[i][j] << " ";
            //     }
            //     cout << endl;
            // }

            //Continue Binary Search accordingly
            if(canCross) {
                latestDay = max(latestDay, m);
                l = m+1;
            } else r = m-1;
            mPrev = m;
        }
        return latestDay;
    }
};
