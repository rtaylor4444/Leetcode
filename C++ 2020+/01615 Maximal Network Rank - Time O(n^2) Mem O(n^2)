//Run Time: 136ms - 87.59%
//Memory Usage: 28.8MB - 88.15%
//Solved =)
//Time O(n^2) Memory O(n^2)
class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        //counting edges + adj matrix for quick lookup
        //0 => 2
        //1 => 3
        //2 => 1
        //3 => 2
        vector<int> count(n, 0);
        vector<vector<bool>> adjMatrix(n, vector<bool>(n, false));
        for(int i = 0; i < roads.size(); ++i) {
            adjMatrix[roads[i][0]][roads[i][1]] = true;
            adjMatrix[roads[i][1]][roads[i][0]] = true;
            count[roads[i][0]]++;
            count[roads[i][1]]++;
        }
        //pick the two that have the greatest count
        //check if there is an edge between the two nodes
        int maxNetwork = 0;
        for(int i = 0; i < count.size(); ++i) {
            for(int j = 0; j < count.size(); ++j) {
                if(i == j) continue;
                int curNetwork = count[i] + count[j];
                if(adjMatrix[i][j]) --curNetwork;
                maxNetwork = max(maxNetwork, curNetwork);
            }
        }
        return maxNetwork;
    }
};
