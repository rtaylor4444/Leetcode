/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//Run Time: 4ms - 51.83%
//Memory Usage: 15MB - 12.18%
//Solved =)
//Time O(h*w) Memory O(h*w +h)
class Solution {
    int minCol, maxCol, maxRow;
    unordered_map<int, unordered_map<int, vector<int>>> posToValues;
public:
    void dfs(TreeNode* node, int col, int row) {
        if(node == nullptr) return;
        minCol = min(minCol, col);
        maxCol = max(maxCol, col);
        maxRow = max(maxRow, row);
        if(!posToValues.count(col)) posToValues.emplace(col, unordered_map<int, vector<int>>());
        if(!posToValues[col].count(row)) posToValues[col].emplace(row, vector<int>());
        posToValues[col][row].push_back(node->val);
        dfs(node->left, col-1, row+1);
        dfs(node->right, col+1, row+1);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        //pos information -> value
        //we can have multiple nodes with the same position
        //at same position we order them by their value
        //pos[col][row] => value(s)
        //how to convert negative col - just use map
        //DFS with positional information
        minCol = maxCol = maxRow = 0;
        posToValues.clear();
        dfs(root, 0, 0);
        vector<vector<int>> ans((maxCol - minCol)+1, vector<int>());
        for(int i = minCol; i <= maxCol; ++i) {
            if(!posToValues.count(i)) continue;
            for(int j = 0; j <= maxRow; ++j) {
                if(!posToValues[i].count(j)) continue;
                vector<int>& curList = posToValues[i][j];
                sort(curList.begin(), curList.end());
                for(int k = 0; k < curList.size(); ++k)
                    ans[i-minCol].push_back(curList[k]);
            }
        }
        return ans;
    }
};
