//Run Time: 222ms - 54.95%
//Memory Usage: 5.9MB - 70.70%
//Solved =)
//Time O(n) Memory O(n)

class FindSumPairs {
    vector<int> num1, num2;
    unordered_map<int, int> num2ToCount;
public:
    FindSumPairs(vector<int>& nums1, vector<int>& nums2) {
        num1 = nums1;
        num2 = nums2;
        for(int i = 0; i < num2.size(); ++i) {
            if(!num2ToCount.count(num2[i])) num2ToCount.emplace(num2[i], 0);
            ++num2ToCount[num2[i]];
        }
    }
    
    void add(int index, int val) {
        int curNum = num2[index];
        if(--num2ToCount[curNum] == 0) num2ToCount.erase(curNum);

        num2[index] += val;
        if(!num2ToCount.count(num2[index])) num2ToCount.emplace(num2[index], 0);
        ++num2ToCount[num2[index]];
    }
    
    int count(int tot) {
        int numPairs = 0;
        for(int i = 0; i < num1.size(); ++i) {
            int target = tot - num1[i];
            if(!num2ToCount.count(target)) continue;
            numPairs += num2ToCount[target];
        }
        return numPairs;
    }
};

/**
 * Your FindSumPairs object will be instantiated and called as such:
 * FindSumPairs* obj = new FindSumPairs(nums1, nums2);
 * obj->add(index,val);
 * int param_2 = obj->count(tot);
 */
