//Run Time: 12ms - 79.38%
//Memory Usage: 19.2MB - 73.67%
//Solved =)
//n = number of nodes
//h = height of the tree
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int depth;
public:
    void calcDepth(TreeNode* node, int curDepth) {
        if(node == nullptr) return;
        curDepth += 1;
        depth = max(curDepth, depth);
        calcDepth(node->left, curDepth);
        calcDepth(node->right, curDepth);
    }
    int maxDepth(TreeNode* root) {
        depth = 0;
        calcDepth(root, 0); 
        return depth;
    }
};
