//Run Time: 16ms - 64.48%
//Memory Usage: 6.8MB - 96.43%
//Solved =)
//Time O(n^2) Memory O(n)
class Solution {
public:
    int minDistance(string word1, string word2) {
        //find common subseq
        //then perform edit distance
        /*
           ' s e a
         ' 0 1 2 3
         e 1 2 1 2
         a 2 3 2 1
         t 3 4 3 2
         
           ' l e e t c o d e
         ' 0 1 2 3 4 5 6 7 8
         e 1 2 1 2 3 4 5 6 7
         t 2 3 2 3 2 3 4 5 6
         c 3 4 3 4 3 2 3 4 5
         o 4 5 4 5 4 3 2 3 4
         if two string match dp[i][j] = dp[i-1][j-1]
         dont match dp[i][j] = min(dp[i][j-1], dp[i-1][j])
        */
        vector<vector<int>> dp(2, vector<int>(word2.size()+1, 0));
        //Fill base cases
        for(int j = 0; j < dp[0].size(); ++j)
            dp[0][j] = j;
        
        for(int i = 1; i <= word1.size(); ++i) {
            dp[i%2][0] = i;
            for(int j = 1; j < dp[0].size(); ++j) {
                if(word1[i-1] == word2[j-1]) dp[i%2][j] = dp[(i-1)%2][j-1];
                else dp[i%2][j] = min(dp[(i-1)%2][j], dp[i%2][j-1]) + 1;
            }
        }
        return dp[word1.size() % 2][word2.size()];
    }
};
