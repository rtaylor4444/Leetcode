//Run Time: 52ms - 76.05%
//Memory Usage: 39.7MB - 27.30%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        //One Pass with hashmap
        //Do it iteratively so we can exit early
        if(root == nullptr) return false;
        unordered_set<int> seenNums;
        stack<TreeNode*> dfs;
        dfs.push(root);
        while(!dfs.empty()) {
            TreeNode* curNode = dfs.top();
            dfs.pop();
            if(seenNums.find(k - curNode->val) != seenNums.end())
                return true;
            
            seenNums.emplace(curNode->val);
        
            if(curNode->left) dfs.push(curNode->left);
            if(curNode->right) dfs.push(curNode->right);
        }
        return false;
    }
};
