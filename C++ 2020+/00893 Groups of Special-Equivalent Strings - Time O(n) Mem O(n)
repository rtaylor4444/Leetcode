//Run Time: 16ms - 85.71%
//Memory Usage: 9.3MB - 36.48%
//Solved =) but need optimizing
//n = number of strings
//Time O(n) Memory O(n)
class Solution {
public:
    string getSortedString(string& curString) {
        string evenString;
        for(int i = 0; i < curString.size(); i += 2) {
            evenString += curString[i];
        }
        sort(evenString.begin(), evenString.end());
        
        string oddString;
        for(int i = 1; i < curString.size(); i += 2) {
            oddString += curString[i];
        }
        sort(oddString.begin(), oddString.end());
        return evenString + oddString;
    }
    int numSpecialEquivGroups(vector<string>& A) {
        //count of every other character?
        //even count 
        //odd count
        //if both match a swap is possible to match
        //therefore special equivalent
        //Grouping?
        //-hash by sorted even chars + odd char
        //-if these are the same they are special equivalent
        unordered_set<string> groupings;
        for(int i = 0; i < A.size(); ++i) {
            groupings.emplace(getSortedString(A[i]));
        }
        return groupings.size();
    }
};
