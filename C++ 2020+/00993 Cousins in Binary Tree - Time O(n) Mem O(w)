//Run Time: 4ms - 76.11%
//Memory Usage: 11.5MB - 24.70%
//Solved =)
//Time O(n) Memory O(w)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        //levelOrder traversal
        unordered_map<int, TreeNode*> valueToParent;
        queue<pair<TreeNode*, TreeNode*>> levelOrder;
        levelOrder.push({root, nullptr});
        while(!levelOrder.empty()) {
            for(int i = levelOrder.size() - 1; i >= 0; --i) {
                TreeNode* curNode = levelOrder.front().first;
                TreeNode* curParent = levelOrder.front().second;
                levelOrder.pop();
                
                if(curNode->val == x || curNode->val == y)
                    valueToParent.emplace(curNode->val, curParent);
                
                if(curNode->left) levelOrder.push({curNode->left, curNode});
                if(curNode->right) levelOrder.push({curNode->right, curNode});
            }
            //Check if x and y are on the same level and have diff parents
            if(valueToParent.size() == 2 && valueToParent[x] != valueToParent[y])
                return true;
            
            valueToParent.clear();
        }
        return false;
    }
};
