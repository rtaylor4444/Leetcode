//Run Time: 24ms - 91.38%
//Memory Usage: 11.9MB - 30.12%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    void parseSubdomain(string domain, unordered_map<string, int>& visit) {
        //Get our number
        int num = 0;
        int startIndex = 0;
        while(domain[startIndex] != ' ') {
            num *= 10;
            num += domain[startIndex] - '0';
            ++startIndex;
        }

        //Parse string - place into hashmap
        for(int i = domain.size() - 1; i >= startIndex; --i) {
            if(domain[i] != '.' && i != startIndex) continue;
            string curString = domain.substr(i + 1, domain.size() - i);
            if(visit.find(curString) != visit.end()) {
                visit[curString] += num;
                continue;
            }
            visit.emplace(curString, num);
        }
    }
    vector<string> subdomainVisits(vector<string>& cpdomains) {
        //Parse each string
        //"900 google.mail.com"
        //Read the number 900
        //then read "google.mail.com" backwards and before each .
        //place it in a hashmap
        //Iterate through hashmap and combine the numbers with the domains
        unordered_map<string, int> visit;
        for(int i = 0; i < cpdomains.size(); ++i) {
            parseSubdomain(cpdomains[i], visit);
        }
        vector<string> visitedDomains;
        for(auto it = visit.begin(); it != visit.end(); ++it) {
            visitedDomains.push_back(to_string(it->second) + " " + it->first);
        }
        return visitedDomains;
    }
};
