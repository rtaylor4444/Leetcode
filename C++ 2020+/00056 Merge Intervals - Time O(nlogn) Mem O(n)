//Run Time: 20ms - 80.38%
//Memory Usage: 39.1MB - 74.07%
//Solved =)
//Time O(nlog(n)) Memory O(n)
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        //Sort intervals by start time
        //Then iterate through and merge accordingly
        vector<vector<int>> mergedIntervals;
        sort(intervals.begin(), intervals.end());
        vector<int> currentInterval = intervals[0];
        for(int i = 1; i < intervals.size(); ++i) {
            if(currentInterval[1] >= intervals[i][0]) {
                currentInterval[1] = max(currentInterval[1], intervals[i][1]);
            } else {
                mergedIntervals.push_back(currentInterval);
                currentInterval = intervals[i];
            }
        }
        mergedIntervals.push_back(currentInterval);
        return mergedIntervals;
    }
};
