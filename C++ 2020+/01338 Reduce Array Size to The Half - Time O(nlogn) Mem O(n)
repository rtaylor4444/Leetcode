//Run Time: 448ms - 69.75%
//Memory Usage: 77.3MB - 7.43%
//Solved =)
//Time O(nlogn) Memory O(n)
bool mySort(int a, int b) {
    return (a > b);
}

class Solution {
public:
    int minSetSize(vector<int>& arr) {
        //[3,3,3,3,5,5,5,2,2,7]
        //number -> count
        //3 -> 4
        //5 -> 3
        //2 -> 2
        //7 -> 1
        //Get weighted estimate by array size / largest set
        //Get counts and sort them
        //start with 2 and check if set combos can reduce array to half
        int maxCount = 0;
        unordered_map<int, int> numToCount;
        for(int i = 0; i < arr.size(); ++i) {
            if(numToCount.find(arr[i]) == numToCount.end())
                numToCount.emplace(arr[i], 0);
            maxCount = max(maxCount, ++numToCount[arr[i]]);
        }
        if(numToCount.size() < 3) return 1;
        
        vector<int> countList;
        countList.reserve(numToCount.size());
        for(auto it = numToCount.begin(); it != numToCount.end(); ++it) {
            countList.push_back(it->second);
        }
        sort(countList.begin(), countList.end(), mySort);
        int setSizeEst = arr.size() / maxCount, halfSize = arr.size() / 2;
        int i, totalSum = 0;
        for(i = 0; i < countList.size(); ++i) {
            totalSum += countList[i];
            if(totalSum >= halfSize) break;
        }
        return i + 1;
    }
};
