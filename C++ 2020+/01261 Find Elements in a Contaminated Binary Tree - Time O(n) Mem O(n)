//Run Time: 48ms - 94.62%
//Memory Usage: 33.7MB - 5.58%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class FindElements {
    TreeNode* curTree;
    unordered_set<int> valuesInTree;
    void preOrder(TreeNode* curNode) {
        int curVal = curNode->val;
        if(curNode->left) {
            curNode->left->val = (2 * curVal) + 1;
            valuesInTree.emplace(curNode->left->val);
            preOrder(curNode->left);
        }
        if(curNode->right) {
            curNode->right->val = (2 * curVal) + 2;
            valuesInTree.emplace(curNode->right->val);
            preOrder(curNode->right);
        }
    }
public:
    FindElements(TreeNode* root) {
        curTree = root;
        curTree->val = 0;
        valuesInTree.emplace(0);
        preOrder(curTree);
    }
    
    bool find(int target) {
        return valuesInTree.find(target) != valuesInTree.end();
    }
};

/**
 * Your FindElements object will be instantiated and called as such:
 * FindElements* obj = new FindElements(root);
 * bool param_1 = obj->find(target);
 */
