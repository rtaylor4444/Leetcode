//Run Time: 24ms - 91.76%
//Memory Usage: 31.1MB - 33.02%
//Solved =)
//Time O(nlogn) Memory O(n)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createTree(ListNode* head, ListNode* tail) {
        if(!head || !tail) return nullptr;
        //Exit on single node
        //cout << head->val << "->" << tail->val << endl;
        if(head == tail) return new TreeNode(head->val);
        //Find mid point in the list
        ListNode *fast = head, *slow = head, *prev = nullptr;
        while(fast && fast != tail) {
            prev = slow;
            slow = slow->next;
            fast = fast->next;
            if(fast && fast != tail) fast = fast->next;
        }
        //cout << slow->val << endl;
        TreeNode* node = new TreeNode(slow->val);
        node->left = createTree(head, prev);
        //edge case: only set slow->next if it isnt the tail
        if(slow != tail) node->right = createTree(slow->next, tail);
        return node;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        //get final node in the list
        if(!head) return nullptr;
        ListNode* tail = head;
        while(tail->next) {
            tail = tail->next;
        }
        return createTree(head, tail);
    }
};
