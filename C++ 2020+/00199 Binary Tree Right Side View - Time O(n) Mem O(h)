//Run Time: 4ms - 67.20%
//Memory Usage: 11.9MB - 24.49%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<int> rightValues;
public:
    void preOrder(TreeNode* node, int curLevel) {
        if(node == nullptr) return;
        if(curLevel == rightValues.size()) {
            rightValues.push_back(node->val);
        }
        
        preOrder(node->right, curLevel+1);
        preOrder(node->left, curLevel+1);
    }
    vector<int> rightSideView(TreeNode* root) {
        //Two Pass solution
        if(root == nullptr) return {};
        rightValues.clear();
        preOrder(root, 0);
        return rightValues;
    }
};
