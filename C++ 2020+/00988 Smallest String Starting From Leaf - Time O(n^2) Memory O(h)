//Run Time: 8ms - 59.26%
//Memory Usage: 19.2MB - 88.53%
//Solved =)
//Time O(n^2) Memory O(h)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    string smallest;
public:
    void dfs(TreeNode* node, string& curString) {
        if(node == nullptr) return;
        curString.push_back('a'+node->val);
        if(node->left == nullptr and node->right == nullptr) {
            reverse(curString.begin(), curString.end());
            if(smallest.empty()) smallest = curString;
            else if(strcmp(smallest.c_str(), curString.c_str()) > 0)
                smallest = curString;
            reverse(curString.begin(), curString.end());
        }
        dfs(node->left, curString);
        dfs(node->right, curString);
        curString.pop_back();
    }
    string smallestFromLeaf(TreeNode* root) {
        string curString;
        dfs(root, curString);
        return smallest;
    }
};
