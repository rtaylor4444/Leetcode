//Run Time: 4ms - 90.77%
//Memory Usage: 14.9MB - 17.75%
//Solved
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxDepth;
    TreeNode* lca;
public:
    int postOrder(TreeNode* node, int curDepth) {
        maxDepth = max(maxDepth, curDepth);
        int leftDepth = (node->left) ? postOrder(node->left, curDepth + 1) : curDepth;
        int rightDepth = (node->right) ? postOrder(node->right, curDepth + 1) : curDepth;
        if(leftDepth == maxDepth && rightDepth == maxDepth)
            lca = node;
        return max(leftDepth, rightDepth);
    }
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        if(root == nullptr) return nullptr;
        lca = nullptr;
        maxDepth = 0;
        postOrder(root, 0);
        return lca;
    }
};
