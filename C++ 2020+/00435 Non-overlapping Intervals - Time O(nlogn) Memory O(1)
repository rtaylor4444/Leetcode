struct SortInterval {
    bool operator()(vector<int>& a, vector<int>& b) {
        if(a[0] < b[0]) return true;
        else if(a[0] > b[0]) return false;
        return abs(a[1] - a[0]) < abs(b[1] - b[0]);
    }
};

class Solution {
public:
    bool canMerge(vector<int>& a, vector<int>& b) {
        //non overlapping ends
        if(a[1] <= b[0]) return false;
        return true;
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        //Brute Force O(n^2)
        //more efficent to remove longer range intervals
        //Sort (nlogn)
        //[1,2], [1,3], [2,3], [3,4]
        // -> 
        sort(intervals.begin(), intervals.end(), SortInterval());
        int removedCount = 0;
        vector<int> intervalSoFar(2, INT_MIN);
        for(int i = 0; i < intervals.size(); ++i) {
            // cout << intervals[i][0] << ", " << intervals[i][1] << "  ";

            //check if the intervals merge
            if(canMerge(intervalSoFar, intervals[i])) {
                ++removedCount;
                //pick the interval that ends the earliest
                if(intervals[i][1] < intervalSoFar[1]) intervalSoFar[1] = intervals[i][1];
            } 
            //otherwise take the current interval as our new interval
            else {
                intervalSoFar[0] = intervals[i][0];
                intervalSoFar[1] = intervals[i][1];
            }
        }
        return removedCount;
    }
};
