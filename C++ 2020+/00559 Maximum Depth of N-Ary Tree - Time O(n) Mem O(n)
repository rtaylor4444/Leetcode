//Run Time: 28ms - 98.88%
//Memory Usage: 10.7MB - 82.89%
//Solved =)
//n = number of nodes
//Time O(n) Memory O(n)
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    int maxDepthHelper(Node* node, int curDepth) {
        if(node == nullptr) return curDepth;
        int localDepth = curDepth;
        for(int i = 0; i < node->children.size(); ++i) {
            localDepth = max(localDepth, maxDepthHelper(node->children[i], curDepth + 1));
        }
        return localDepth;
    }
    int maxDepth(Node* root) {
        if(root == nullptr) return 0;
        return maxDepthHelper(root, 1);
    }
};
