//Run Time: 4ms - 79.02%
//Memory Usage: 9.9MB - 32.73%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDiffInBST(TreeNode* root) {
        int minVal = INT_MAX, prevVal = INT_MAX;
        TreeNode* curNode = root;
        stack<TreeNode*> inorder;
        while(curNode || !inorder.empty()) {
            //Populate stack
            while(curNode) {
                inorder.push(curNode);
                curNode = curNode->left;
            }
            
            //Process node
            curNode = inorder.top();
            inorder.pop();
            int curVal = curNode->val;
            if(prevVal != INT_MAX) minVal = min(abs(curVal - prevVal), minVal);
            //Exit early if we find all smallest diff possible
            if(minVal == 1) break;
            prevVal = curVal;
            
            //Go right
            curNode = curNode->right;
        }
        return minVal;
    }
};
