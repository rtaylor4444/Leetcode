//Run Time: 8ms - 97.14%
//Memory Usage: 9MB - 6.21%
//Solved =)
//Time O(m + n*m) Memory O(m + n)
class LinkedList {
    struct ListNode {
        ListNode *next;
        int val;
        ListNode(int v) {
            val = v;
            next = nullptr;
        }
    };
    ListNode* head;
public:
    LinkedList() {
        head = nullptr;
    }
    ~LinkedList() {
        ListNode* curNode = head;
        while(curNode) {
            ListNode* prevNode = curNode;
            curNode = curNode->next;
            delete prevNode;
        }
    }
    void addFront(int value) {
        ListNode* newNode = new ListNode(value);
        newNode->next = head;
        head = newNode;
    }
    int findValuePos(int value) {
        ListNode* curNode = head, *prevNode = nullptr;
        int pos = 0;
        while(curNode && curNode->val != value) {
            prevNode = curNode;
            curNode = curNode->next;
            ++pos;
        }
        //Set curNode as the head
        if(prevNode && curNode) {
            prevNode->next = curNode->next;
            curNode->next = head;
            head = curNode;
        }
        return (curNode) ? pos : -1;
    }
    void printList() {
        ListNode* curNode = head;
        while(curNode) {
            cout << curNode->val << " ";
            curNode = curNode->next;
        }
        cout << endl;
    }
};

class Solution {
public:
    vector<int> processQueries(vector<int>& queries, int m) {
        LinkedList permutations;
        while(m) {
            permutations.addFront(m--);
        }
        //permutations.printList();
        
        vector<int> results(queries.size(), 0);
        for(int i = 0; i < queries.size(); ++i) {
            results[i] = permutations.findValuePos(queries[i]);
            //permutations.printList();
        }
        return results;
    }
};
