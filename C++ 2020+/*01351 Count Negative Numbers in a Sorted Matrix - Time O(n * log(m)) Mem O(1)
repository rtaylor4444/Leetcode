//Run Time: 32ms - 95.89%
//Memory Usage: 10.5MB - 86.39%
//Solved =)
//Time O(n * log(m)) Memory O(1)
class Solution {
public:
    int binarySearch(vector<int> & row) {
        int l = 0;
        int r = row.size() - 1;
        int numNeg = row.size();
        //[4,3,2,-1]
        //Step 1
        //m = 1
        //l = 2
        //neg = 2
        //Step 2
        //m = 2
        //l = 3
        //neg = 1
        //Step 3
        //m = 3
        //r = 2
        //neg = 1
        
        while(l <= r) {
            int m = l + ((r - l) / 2);
            //Go right if no negative
            if(row[m] >= 0) {
                l = m + 1;
                numNeg = row.size() - l;
            }
            //found negative continue loop to get accurate count
            else {
                r = m - 1;
            }
        }
        return numNeg;
    }
    int countNegatives(vector<vector<int>>& grid) {
        //Run Binary Search for each row and determine
        //how many negative numbers are in each row
        //(We dont actually have to iterate through them)
        //[4,3,2,-1]
        //[3,2,1,-1]
        //[1,1,-1,-2]
        //[-1,-1,-2,-3]
        int numNegative = 0;
        for(int i = 0; i < grid.size(); ++i) {
            numNegative += binarySearch(grid[i]);
        }
        return numNegative;
    }
};
