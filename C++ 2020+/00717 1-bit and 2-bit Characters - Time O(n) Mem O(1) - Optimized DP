//Run Time: 8ms - 51.65%
//Memory Usage: 10.1MB - 22.86%
//Solved =)
//Time O(n) Memory O(1)
class Solution {
    unordered_set<string> viableBits;
public:
    Solution() {
        viableBits = {"10", "11", "0"};
    }
    bool isOneBitCharacter(vector<int>& bits) {
        //DP?
        //We will check suffixes
        //Try all combinations since the last char is always a 0
        //it can either be 10 or 0
        //one char is always 0
        //two chars are 10 and 11
        //State -1 = undecided, 1 = true, 0 = false;
        //vector<int> dp(bits.size(), -1);
        //dp[bits.size() - 1] = 1;
        int prev = 1, cur = -1, next = -1;
        for(int i = bits.size() - 2; i >= 0; --i) {
            //check 1-bit
            string curBit;
            curBit += '0' + bits[i];
            if(prev && viableBits.find(curBit) != viableBits.end()) {
                cur = 1;
            }
            //If dp was set to true dont reset it to false
            else if(cur < 1) cur = 0;
            //check 2-bit
            if(i-1 > -1) {
                curBit.clear();
                curBit += '0' + bits[i-1];
                curBit += '0' + bits[i];
                if(prev && viableBits.find(curBit) != viableBits.end()) {
                    next = 1;
                }
                else if(next < 1) next = 0;
            }
            //Advance pointers
            prev = cur;
            cur = next;
            next = -1;
        }
        return prev > 0;
    }
};
