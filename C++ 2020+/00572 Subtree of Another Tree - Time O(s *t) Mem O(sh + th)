//Run Time: 36ms - 69.75%
//Memory Usage: 29.3MB - 27.11%
//Solved =)
//-Time truly depends on how many duplicate root
//nodes match t if unique performance is linear
//s = tree1, t = tree 2
//h = height of said tree
//Time O(s * t) Memory O(sh + th)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* tree1, TreeNode* tree2) {
        if(tree1 == nullptr && tree2 == nullptr) return true;
        else if(tree1 == nullptr || tree2 == nullptr) return false;
        
        if(tree1->val != tree2->val) return false;
        return isSameTree(tree1->left, tree2->left) && isSameTree(tree1->right, tree2->right);
    }
    bool isSubtree(TreeNode* s, TreeNode* t) {
        //for every node we must traverse and see if t has the exact same structure
        if(s == nullptr) return false;
        if(isSameTree(s, t)) return true;
        return isSubtree(s->left, t) || isSubtree(s->right, t);
    }
};
