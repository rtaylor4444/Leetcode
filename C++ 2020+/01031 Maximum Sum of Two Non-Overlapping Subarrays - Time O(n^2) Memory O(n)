//Run Time: 12ms - 36.21%
//Memory Usage: 8.7MB - 44.35%
//Solved =)
//Time O(n^2) Memory O(n)

class Solution {
public:
    int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {
        //pre calc the sums + maxsubarray start of each size
        int curSum = 0;
        vector<int> calcedSums(nums.size()+1, 0);

        for(int i = nums.size() - 1; i >= 0; --i) {
            curSum += nums[i];
            calcedSums[i] = curSum;
        }
        
        int maxSum = 0;
        for(int i = 0; i < calcedSums.size()-firstLen; ++i) {
            int curSum = calcedSums[i] - calcedSums[i+firstLen];
            for(int j = 0; j < calcedSums.size()-secondLen; ++j) {
                //check overlap
                if(j+(secondLen-1) >= i && j <= i+(firstLen-1)) continue;
                maxSum = max(curSum + (calcedSums[j] - calcedSums[j+secondLen]), maxSum); 
            }
        }
        return maxSum;
    }
};
