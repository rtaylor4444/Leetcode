//Run Time: 16ms - 98.13%
//Memory Usage: 10.2MB - 67.40%
//Solved =)
//Time O(n^2) Memory O(1)
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& A) {
        //Fill other rows
        for(int i = A.size() - 2; i >= 0; --i) {
            for(int j = 0; j < A.size(); ++j) {
                //Set memo to previous middle element
                int smallestStep = A[i+1][j];
                //Right
                if(j + 1 < A.size())
                    smallestStep = min(smallestStep, A[i+1][j+1]);
                //Left
                if(j - 1 >= 0)
                    smallestStep = min(smallestStep, A[i+1][j-1]);
                
                A[i][j] += smallestStep;
            }
        }
        
        int ans = INT_MAX;
        for(int i = 0; i < A.size(); ++i) {
            ans = min(ans, A[0][i]);
        }
        return ans;
    }
};
