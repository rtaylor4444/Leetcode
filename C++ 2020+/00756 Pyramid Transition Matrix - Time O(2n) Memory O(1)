//Run Time: 825ms - 54.32%
//Memory Usage: 10.96MB - 95.06%
//Solved =)
//Time O(2n) Memory O(1)

class Solution {
    unordered_map<int, vector<char>> bottomToTops;
public:
    bool isPossible(vector<string>& levels, int pos, int level) {
        //exit when complete pyramid is made
        if(level == levels.size()-1) return true;

        //If we have a valid next start over
        if(pos+1 == levels[level].size()) {
            //cout << levels[level+1] << endl;
            return isPossible(levels, 0, level+1);
        }

        //iterate over all possible heads
        int key = levels[level][pos] | (levels[level][pos+1] << 9);
        vector<char>& tops = bottomToTops[key];
        for(int i = 0; i < tops.size(); ++i) {
            levels[level+1].push_back(tops[i]);
            if(isPossible(levels, pos+1, level)) return true;
            levels[level+1].pop_back();
        }
        return false;
    }
    bool pyramidTransition(string bottom, vector<string>& allowed) {
        //Backtracking
        //allowed => [left, right, top]
        //account for multiple possibilities
        bottomToTops.clear();
        for(int i = 0; i < allowed.size(); ++i) {
            int key = allowed[i][0] | (allowed[i][1] << 9);
            if(!bottomToTops.count(key)) bottomToTops.emplace(key, vector<char>());
            bottomToTops[key].push_back(allowed[i][2]);
        }
        vector<string> levels(bottom.size(), "");
        levels[0] = bottom;
        return isPossible(levels, 0, 0);
    }
};
