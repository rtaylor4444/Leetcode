//Run Time: 0ms - 100.00%
//Memory Usage: 9.9MB - 75.14%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        //Preorder check if both nodes exist and values exist
        //Both nodes dont exist
        if(p == nullptr && q == nullptr) return true;
        //One node exists but the other doesnt
        else if(q == nullptr || p == nullptr) return false;
        //Values arent the same - both nodes exist
        if(p->val != q->val) return false;
        return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};
