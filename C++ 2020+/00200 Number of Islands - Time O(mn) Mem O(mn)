//Run Time: 20ms - 79.18%
//Memory Usage: 39.1MB - 85.13%
//Solved =)
//Time O(mn) Memory O(mn)
class Solution {
public:
    void dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j) {
        if(i < 0 || i >= grid.size()) return;
        if(j < 0 || j >= grid[i].size()) return;
        if(visited[i][j]) return;
        if(grid[i][j] == '0') return;
        
        visited[i][j] = true;
        //cout << i << "-" << j << endl;
        dfs(grid, visited, i+1, j);
        dfs(grid, visited, i-1, j);
        dfs(grid, visited, i, j+1);
        dfs(grid, visited, i, j-1);
    }
    int numIslands(vector<vector<char>>& grid) {
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), false));
        int numIslands = 0;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                if(visited[i][j] || grid[i][j] == '0') continue;
                dfs(grid, visited, i, j);
                ++numIslands;
            }
        }
        return numIslands;
    }
};
