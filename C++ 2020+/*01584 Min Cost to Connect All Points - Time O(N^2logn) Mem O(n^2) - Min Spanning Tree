//Run Time: 753ms - 38.48%
//Memory Usage: 176.36MB - 20.47%
//Solved =)
//Time O(N^2logn) Memory O(n^2)

class Solution {
    struct SortPoints {
        bool operator()(vector<int>& a, vector<int>& b) {
            return a[0] > b[0];
        }
    };

public:
    int getManhattanDist(vector<int>& a, vector<int>& b) {
        return abs(a[0] - b[0]) + abs(a[1] - b[1]);
    }

    int minCostConnectPoints(vector<vector<int>>& points) {
        //Prims Min Spanning Tree
        if(points.size() == 1) return 0;
        
        //[cost, from, to]
        priority_queue<vector<int>, vector<vector<int>>, SortPoints> p_q;
        vector<bool> visited(points.size(), false);
        int minCost = 0, numVisited = 0;
        p_q.push({0, 0, 0});

        while(!p_q.empty()) {
            vector<int> edgeInfo = p_q.top();
            p_q.pop();

            //skip if this edge is redundant (visited either points before)
            if(visited[edgeInfo[2]]) continue;

            minCost += edgeInfo[0];
            visited[edgeInfo[2]] = true;
            if(++numVisited == visited.size()) break;
            //add all possible edges to the priority queue
            for(int i = 0; i < points.size(); ++i) {
                if(i == edgeInfo[2]) continue;
                if(visited[i]) continue;
                //all possible edges to the priority queue
                p_q.push({getManhattanDist(points[edgeInfo[2]], points[i]), edgeInfo[2], i});
            }
        }
        return minCost;
    }
};
