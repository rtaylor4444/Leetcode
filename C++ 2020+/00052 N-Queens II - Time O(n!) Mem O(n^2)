//Run Time: 8ms - 40.18%
//Memory Usage: 7.1MB - 98.04%
//Solved =)
//Time O(n!) Memory O(n)
class Solution {
public:
    int solve(int curRow, vector<bool>& takenCol, unordered_set<int>& takenDiag,
              unordered_set<int>& takenAntiDiag) {
        int numSolutions = 0;
        if(curRow == takenCol.size()) return 1;
        for(int i = 0; i < takenCol.size(); ++i) {
            if(takenCol[i]) continue;
            if(takenDiag.find(curRow - i) != takenDiag.end()) continue;
            if(takenAntiDiag.find(curRow + i) != takenAntiDiag.end())
                continue;
            
            takenCol[i] = true;
            takenDiag.insert(curRow - i);
            takenAntiDiag.insert(curRow + i);
            numSolutions += solve(curRow+1, takenCol, takenDiag, takenAntiDiag);
            takenAntiDiag.erase(curRow + i);
            takenDiag.erase(curRow - i);
            takenCol[i] = false;
        }
        return numSolutions;
    }
    int totalNQueens(int n) {
        vector<bool> takenCol(n, false);
        unordered_set<int> takenDiag, takenAntiDiag;
        return solve(0, takenCol, takenDiag, takenAntiDiag);
    }
};
