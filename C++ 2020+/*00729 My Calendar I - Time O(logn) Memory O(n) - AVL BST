//Run Time: 74ms - 83.38%
//Memory Usage: 43MB - 10.45%
//Solved =)
//Time O(logn) Memory O(n)

struct AVLNode {
    AVLNode* left;
    AVLNode* right;
    int start, end;
    int height;

    AVLNode(int start, int end) {
        left = right = nullptr;
        this->start = start;
        this->end = end;
        height = 1;
    }
    ~AVLNode() {

    }
};

class AVLTree {
    AVLNode* root;

    //Helpers
    void clearTree(AVLNode* node) {
        if(node == nullptr) return;
        clearTree(node->left);
        clearTree(node->right);
        delete node;
    }
    int getHeight(AVLNode* node) {
        if(node == nullptr) return 0;
        return node->height;
    }
    AVLNode* leftRotation(AVLNode* node) {
        AVLNode* right = node->right;
        //do rotation
        node->right = right->left;
        right->left = node;
        //update the heights
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        right->height = 1 + max(getHeight(right->left), getHeight(right->right));
        //right becomes the new parent
        return right;
    }
    AVLNode* rightRotation(AVLNode* node) {
        AVLNode* left = node->left;
        //do rotation
        node->left = left->right;
        left->right = node;
        //update the heights
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));
        left->height = 1 + max(getHeight(left->left), getHeight(left->right));
        //left becomes the new parent
        return left;
    }
    AVLNode* insertNode(AVLNode* node, int start, int end) {
        if(node == nullptr) return new AVLNode(start, end);

        if(start < node->start) 
            node->left = insertNode(node->left, start, end);
        else if(start > node->start)
            node->right = insertNode(node->right, start, end);
        else //don't insert duplicates
            return node;

        //update the heights
        node->height = 1 + max(getHeight(node->left), getHeight(node->right));

        //get balance 
        int balance = getHeight(node->left) - getHeight(node->right);

        //rotate based on balance
        //right subtree needs more nodes
        if(balance > 1) {
            //if node was inserted right we must fix the tree so we can rotate
            if(start > node->left->start) node->left = leftRotation(node->left);
            return rightRotation(node);
        }
        //left subtree needs more nodes
        else if(balance < -1) {
            //if node was inserted left we must fix the tree so we can rotate
            if(start < node->right->start) node->right = rightRotation(node->right);
            return leftRotation(node);
        }
        return node;
    }
public:
    AVLTree() {
        root = nullptr;
    }
    ~AVLTree() {
        clearTree(root);
    }

    bool empty() { return root == nullptr; }
    void insert(int start, int end) {
        root = insertNode(root, start, end);
    }
    const AVLNode* findFirstGreaterThan(int start) {
        AVLNode* ans = nullptr, *curNode = root;
        while(curNode) {
            if(curNode->start >= start) {
                ans = curNode;
                curNode = curNode->left;
            } 
            else curNode = curNode->right;
        }
        return ans;
    }
    const AVLNode* findFirstLessThan(int start) {
        AVLNode* ans = nullptr, *curNode = root;
        while(curNode) {
            if(curNode->start <= start) {
                ans = curNode;
                curNode = curNode->right;
            } 
            else curNode = curNode->left;
        }
        return ans;
    }
};

class MyCalendar {
    AVLTree* intervalBST;

    bool checkOverlap(int start, int end, int start1, int end1) {
        int maxStart = max(start, start1);
        int minEnd = min(end, end1);
        //cout << "overlap: " << maxStart << " - " << minEnd << endl;
        return minEnd - maxStart < 1;
    }
public:
    MyCalendar() {
        intervalBST = new AVLTree();
    }
    ~MyCalendar() {
        delete intervalBST;
    }
    
    bool book(int start, int end) {
        if(intervalBST->empty()) {
            intervalBST->insert(start, end);
            return true;
        }

        //cout << "attempting to add: " << start << " - " << end << endl;
        const AVLNode* lowerNode = intervalBST->findFirstLessThan(start);
        const AVLNode* upperNode = intervalBST->findFirstGreaterThan(start);
        //check and make sure there is no overlap for both start and end
        if(lowerNode) {
            //cout << "lower node: " << lowerNode->start << " - " << lowerNode->end << endl;
            if(!checkOverlap(start, end, lowerNode->start, lowerNode->end)) return false;
        }
        if(upperNode) {
            //cout << "upper node: " << upperNode->start << " - " << upperNode->end << endl;
            if(!checkOverlap(start, end, upperNode->start, upperNode->end)) return false;
        }
        
        //cout << "added: " << start << " - " << end << endl;
        intervalBST->insert(start, end);
        return true;
    }
};

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar* obj = new MyCalendar();
 * bool param_1 = obj->book(start,end);
 */
