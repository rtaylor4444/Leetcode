//Run Time: 16ms - 98.40%
//Memory Usage: 16.1MB - 6.23%
//Solved =)
//Time O(n*log(k)) Memory O(n + k)
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        //O(n log k)  if we use heap of size k
        //Count them
        //value -> count
        //1 -> 3
        //2 -> 2
        //3 -> 1
        //Since we need top k I'm thinking heap
        unordered_map<int, int> valueToCount;
        for(int i = 0; i < nums.size(); ++i) {
            if(valueToCount.find(nums[i]) != valueToCount.end())
                valueToCount.emplace(nums[i], 0);
            valueToCount[nums[i]]++;
        }
        //Get top k freq
        //pair {count, value}
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> p_q;
        for(auto it = valueToCount.begin(); it != valueToCount.end(); ++it) {
            p_q.push({it->second, it->first});
            if(p_q.size() > k) p_q.pop();
        }
        //Build answer
        vector<int> topKfreq(k, 0);
        int index = k - 1;
        while(!p_q.empty()) {
            topKfreq[index--] = p_q.top().second;
            p_q.pop();
        }
        return topKfreq;
    }
};
