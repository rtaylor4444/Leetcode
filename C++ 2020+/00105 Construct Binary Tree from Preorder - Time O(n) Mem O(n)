//Run Time: 12ms - 97.96%
//Memory Usage: 26.2MB - 86.00%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int preIndex;
    unordered_map<int, int> valueToIndex;
public:
    TreeNode* constructTree(vector<int>& preorder, vector<int>& inorder, int left, int right) {
        if(left > right) return nullptr;
        TreeNode* root = new TreeNode(preorder[preIndex++]);
        //Similar to quick sort divide left and right subtree in array
        int index = valueToIndex[root->val];
        root->left = constructTree(preorder, inorder, left, index-1);
        root->right = constructTree(preorder, inorder, index+1, right);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty()) return nullptr;
        // build value -> index map from inorder
        valueToIndex.clear();
        for(int i = 0; i < inorder.size(); ++i) {
            valueToIndex.emplace(inorder[i], i);
        }
        preIndex = 0;
        return constructTree(preorder, inorder, 0, inorder.size() -1);
    }
};
