//Run Time: 8ms - 64.43%
//Memory Usage: 16.2MB - 95.68%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        //BFS
        if(root == nullptr) return 0;
        int maxWidth = 1;
        //{node, pos}
        queue<pair<TreeNode*, int>> bfs;
        bfs.push({root, 0});
        while(!bfs.empty()) {
            int minPos = INT_MAX;
            int maxPos = INT_MIN;
            int startPos = bfs.front().second;
            for(int i = bfs.size() - 1; i >= 0; --i) {
                TreeNode* cur = bfs.front().first;
                int curPos = bfs.front().second - startPos;
                bfs.pop();
                minPos = min(minPos, curPos);
                maxPos = max(maxPos, curPos);
                //cout << curPos << endl;
                if(cur->left) bfs.push({cur->left, 2*curPos});
                if(cur->right) bfs.push({cur->right, 2*curPos+1});
            }
            maxWidth = max(maxWidth, maxPos+1 - minPos);
        }
        return maxWidth;
    }
};
