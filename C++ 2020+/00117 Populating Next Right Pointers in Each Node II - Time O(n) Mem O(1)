//Run Time: 4ms - 99.86%
//Memory Usage: 17.4MB - 75.70%
//Solved =)
//Time O(n) Memory O(1)
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        Node* curNode = root, *prevLevel = nullptr;
        //Iterate down the tree
        while(curNode) {
            //Iterate across the tree 
            Node* startPos = curNode, *nextPos = curNode->left ? curNode->left : curNode->right;
            while(prevLevel && curNode) {
                //set inital next pointer
                if(prevLevel->left) prevLevel->left->next = prevLevel->right;
                Node* nextNode = prevLevel->left ? prevLevel->left : prevLevel->right;
                if(curNode != nextNode) curNode->next = nextNode;
                while(curNode->next) {
                    curNode = curNode->next;
                    //record the first valid next node
                    if(!nextPos) nextPos = curNode->left ? curNode->left : curNode->right;
                }
                prevLevel = prevLevel->next;
            }
            //reset position
            prevLevel = startPos;
            //ensure we set to the first node at the next level
            curNode = nextPos;
        }
        return root;
    }
};
