//Run Time: 0ms - 100.00%
//Memory Usage: 8.9MB - 8.89%
//Unoptimal Solution - Memory/Time needs improvement
//Optimized: https://leetcode.com/problems/sum-of-all-odd-length-subarrays/discuss/867779/Java-O(n)-time-with-Video-explanation
//Time O(n^2) Memory O(n)
class Solution {
public:
    int sumOddLengthSubarrays(vector<int>& arr) {
        //Dynamic Programming - Brute Force
        //Remember dp options are prefixes, suffixes or subarray/substring
        //dp[subarray start][subarray end] = subarray sum
        //Optimize to dp[0 to subarray end] = subarray sum aka prefix sum
        vector<int> prefixSum(arr.size() + 1, 0);
        int totalSum = 0;
        //first index of prefixSum is 0 for cleaner code later
        for(int i = 0; i < arr.size(); ++i) {
            totalSum += arr[i];
            prefixSum[i+1] = totalSum;
        }
        
        totalSum = 0;
        for(int i = 0; i < arr.size(); ++i) {
            for(int j = i; j < arr.size(); j+=2) {
                totalSum += prefixSum[j+1] - prefixSum[i];
            }
        }
        return totalSum;
    }
};
