//Run Time: 0ms - 100.00%
//Memory Usage: 12.9MB - 50.27%
//Solved =)
//n - number of nodes
//Time O(N) Memory O(N)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getLeafValues(TreeNode* node, vector<int>& valueList) {
        if(node == nullptr) return;
        //Check if we are a leaf
        if(node->left == nullptr && node->right == nullptr)
            valueList.push_back(node->val);
        
        getLeafValues(node->left, valueList);
        getLeafValues(node->right, valueList);
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> values1;
        vector<int> values2;
        getLeafValues(root1, values1);
        getLeafValues(root2, values2);
        if(values1.size() != values2.size()) return false;
        for(int i = 0; i < values1.size(); ++i) {
            if(values1[i] != values2[i]) return false;
        }
        return true;
    }
};
