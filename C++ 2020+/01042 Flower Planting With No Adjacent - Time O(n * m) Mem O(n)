//Run Time: 256ms - 72.48%
//Memory Usage: 8.2MB - 61.95%
//Solved =)
//n = number of nodes
//m = number of paths/neighbors
//Time O(n * m) Memory O(n)
class Solution {
public:
    vector<int> gardenNoAdj(int N, vector<vector<int>>& paths) {
        //1 garden we want one of the 4 types of flowers
        //path = [x,y]  x <-> y
        //no garden has more than 3 bidirectional paths
        //chose flower type so path has diff flower types
        //specifically 4 types of flowers
        //[[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
        //list 
        //1 => 2,3
        //2 => 3,4
        //3 => 4
        //4 => 1
        
        //Make adj list for quick look up
        vector<vector<int>> adjList(N+1, vector<int>());
        for(int i = 0; i < paths.size(); ++i) {
            //bidirectional so push both nodes
            adjList[paths[i][0]].push_back(paths[i][1]);
            adjList[paths[i][1]].push_back(paths[i][0]);
        }
        //loop through and color our nodes
        vector<int> ans(N, 0);
        for(int i = 1; i <= N; ++i) {
            //Get colors of our neighbors nodes
            //cout << "node: " << i - 1 << endl;
            vector<bool> colors(5, false);
            for(int j = 0; j < adjList[i].size(); ++j) {
                if(!ans[adjList[i][j] - 1]) continue;
                //cout << "color of: " << ans[adjList[i][j] - 1] << " is taken " << endl;
                colors[ans[adjList[i][j] - 1]] = true;
            }
            //assign ourself the first available color
            for(int c = 1; c < colors.size(); ++c) {
                if(!colors[c]) {
                    ans[i - 1] = c;
                    //cout << "our color is now: " << c << endl;
                    break;
                }
            }
        }
        return ans;
    }
};
