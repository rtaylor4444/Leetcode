//Run Time: 36ms - 92.16%
//Memory Usage: 39.1MB - 6.99%
//Solved =)
//Time O(1) Memory O(n)
class RandomizedSet {
    unordered_map<int, int> valueToIndex;
    unordered_map<int, int> indexToValue;
public:
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(valueToIndex.find(val) != valueToIndex.end())
            return false;
        
        int nextIndex = valueToIndex.size();
        indexToValue.emplace(nextIndex, val);
        valueToIndex.emplace(val, nextIndex);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(valueToIndex.find(val) == valueToIndex.end())
            return false;
        
        //Clear both maps
        int curIndex = valueToIndex[val];
        valueToIndex.erase(val);
        indexToValue.erase(curIndex);
        
        //Size of 1 edge case
        if(valueToIndex.empty()) return true;
        
        //Swap element to delete with the last one
        int lastIndex = valueToIndex.size();
        int lastValue = indexToValue[lastIndex];       
        valueToIndex.erase(lastValue);
        indexToValue.erase(lastIndex);
        
        //Place new values
        valueToIndex.emplace(lastValue, curIndex);
        indexToValue.emplace(curIndex, lastValue);
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        int index = rand() % valueToIndex.size();
        return indexToValue[index];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
