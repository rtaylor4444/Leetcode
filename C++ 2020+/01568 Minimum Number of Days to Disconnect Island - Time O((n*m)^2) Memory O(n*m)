//Run Time: 235ms - 6.15%
//Memory Usage: 15.9MB - 69.27%
//Needs Optimize
//Time O((n*m)^2) Memory O((n*m))

class Solution {
    vector<vector<int>> dir;
public:
    Solution() {
        dir.push_back({0, 1});
        dir.push_back({0, -1});
        dir.push_back({1, 0});
        dir.push_back({-1, 0});
    }
    bool isValid(vector<vector<int>>& grid, int i, int j) {
        if(i < 0 || j < 0) return false;
        if(i >= grid.size() || j >= grid[i].size()) return false;
        return true;
    }
    void dfs(vector<vector<int>>& grid, vector<vector<bool>>& visited, int i, int j) {
        if(visited[i][j]) return;
        visited[i][j] = true;
        for(int d = 0; d < dir.size(); ++d) {
            int iNext = i + dir[d][0];
            int jNext = j + dir[d][1];
            if(!isValid(grid, iNext, jNext)) continue;
            if(grid[iNext][jNext] == 0) continue;
            if(visited[iNext][jNext]) continue;
            dfs(grid, visited, iNext, jNext);
        }
    }
    int getNumIslands(vector<vector<int>>& grid) {
        int numIslands = 0;
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), false));
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                if(grid[i][j] == 0) continue;
                if(visited[i][j]) continue;
                dfs(grid, visited, i, j);
                ++numIslands;
            }
        }
        return numIslands;
    }
    bool verifyCandidate(vector<vector<int>>& grid, int i, int j) {
        vector<bool> isWater(dir.size(), true);
        for(int d = 0; d < dir.size(); ++d) {
            int iNext = i + dir[d][0];
            int jNext = j + dir[d][1];
            if(!isValid(grid, iNext, jNext)) continue;
            isWater[d] = grid[iNext][jNext] == 0; 
        }
        //left-right check
        if(isWater[0] && isWater[1]) return true;
        if(isWater[2] && isWater[3]) return true;
        return false;
    }
    int minDays(vector<vector<int>>& grid) {
        //Can check the islands using DFS
        //we can always make 2 islands with a maximum of 2 days
        //max days = 2
        if(getNumIslands(grid) != 1) return 0;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                if(grid[i][j] == 0) continue;
                //if(!verifyCandidate(grid, i, j)) continue;
                grid[i][j] = 0;
                int numIslands = getNumIslands(grid);
                grid[i][j] = 1;
                if(numIslands != 1) return 1;
            }
        }
        return 2;
    }
};
