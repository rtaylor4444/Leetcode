//Run Time: 50ms - 63.73%
//Memory Usage: 6.8MB - 88.78%
//Solved =)
//Time O(n*m) Memory O(m)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        //Dynamic Programming
        //  ' a c e
        //' 0 0 0 0
        //a 0 1 1 1
        //b 0 1 1 1
        //c 0 1 2 2
        //d 0 1 2 2
        //e 0 1 2 3
        //if match dp[i][j] = d[i-1][j-1] + 1
        //else dp[i][j] = max(dp[i-1][j], dp[i][j-1])

        vector<vector<int>> dp(2, vector<int>(text2.size()+1, 0));
        for(int i = 0; i < text1.size(); ++i) {
            for(int j = 0; j < text2.size(); ++j) {
                if(text1[i] == text2[j]) dp[(i+1)%2][j+1] = dp[i%2][j] + 1;
                else dp[(i+1)%2][j+1] = max(dp[i%2][j+1], dp[(i+1)%2][j]);
            }
        }
        return dp[text1.size()%2][text2.size()];
    }
};
