//Run Time: 0ms - 100.00%
//Memory Usage: 8.1MB - 26.47%
//Unoptimal Solution - Memory/Time needs improvement
//Time O(n^2) Memory O(n^2)
class Solution {
public:
    bool PredictTheWinner(vector<int>& nums) {
        //Bottom-up
        //try all the possible options        
        //dp[start][end] = maxScore
        vector<vector<int>> dp(nums.size(), vector<int>(nums.size(), INT_MIN));
        //int ourScore = getMaxScore(dp, nums, 0, nums.size() - 1);
        //Fill Base cases
        for(int i = 0; i < nums.size(); ++i) {
            dp[i][i] = nums[i];
        }
        //Fill the rest of the array
        for(int size = 1; size < nums.size(); ++size) {
            for(int i = 0; i + size < nums.size(); ++i) {
                //test first choice
                int choice1 = dp[i][i];
                choice1 -= dp[i+1][i+size];

                //test second choice
                int choice2 = dp[i+size][i+size];
                choice2 -= dp[i][i+size-1];
                dp[i][i+size] = max(choice1, choice2);
            }
        }
        return (dp[0][nums.size() -1] >= 0);
    }
};
