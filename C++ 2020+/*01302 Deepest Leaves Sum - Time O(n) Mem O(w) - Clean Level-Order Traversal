//Run Time: 40ms - 99.77%
//Memory Usage: 39.4MB - 5.65%
//Solved =)
//Time O(n) Memory O(w)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
    int deepestLeavesSum(TreeNode* root) {
        if(root == nullptr) return 0;
        int curSum = 0;
        queue<TreeNode*> levelOrder;
        levelOrder.push(root);
        while(!levelOrder.empty()) {
            curSum = 0;
            for(int i = levelOrder.size() - 1; i >= 0; --i) {
                TreeNode* curNode = levelOrder.front();
                levelOrder.pop();
                curSum += curNode->val;
                if(curNode->left) levelOrder.push(curNode->left);
                if(curNode->right) levelOrder.push(curNode->right);   
            }
        }
        return curSum;
    }
};
