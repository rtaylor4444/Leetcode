//Run Time: 30ms - 20.00%
//Memory Usage: 50.20MB - 32.66%
//Solved =)
//Time O(n) Memory O(h)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<TreeNode*> dupNodes;
    unordered_map<string, int> subTreesFound;
public:
    string postOrder(TreeNode* node) {
        if(node == nullptr) return "";
        string subTree = to_string(node->val);
        subTree += "l" + postOrder(node->left);
        subTree += "r" + postOrder(node->right);
        if(!subTreesFound.count(subTree)) subTreesFound.emplace(subTree, 0);
        if(++subTreesFound[subTree] == 2) dupNodes.push_back(node);
        return subTree;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        subTreesFound.clear();
        postOrder(root);
        return dupNodes;
    }
};
