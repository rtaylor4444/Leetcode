//Run Time: 8ms - 41.85%
//Memory Usage: 9.9MB - 45.87%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    int recursive(vector<int>& days, vector<int>& costs, vector<int>& memo,
                  int curDay, int curIndex) {
        while(curIndex < days.size() && curDay > days[curIndex]) ++curIndex;
        if(curDay > days[days.size() - 1]) return 0;
        if(memo[curIndex] != INT_MAX) return memo[curIndex];
        //Move to the day that is not covered
        curDay = days[curIndex];
        
        int localMin = INT_MAX;
        for(int i = 0; i < 3; ++i) {
            int numDays;
            if(i == 0) numDays = 1;
            else if(i == 1) numDays = 7;
            else if(i == 2) numDays = 30;
            //Check and see if buying this ticket gets up to another day
            //cout << curDay+numDays << " to " << days[curIndex] << endl;
            if(curDay+numDays < days[curIndex]) continue;
            //cout << "testing day: " << curDay+numDays << endl;
            int result = recursive(days, costs, memo, curDay+numDays, curIndex);
            memo[curIndex] = min(memo[curIndex], costs[i] + result);
        }
        return memo[curIndex];
    }
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        //1 4 6 7 8 20
        //2 2 2 2 2 2 = 12
        //7       2 2 = 11
        //15 = 15
        //recursive
        vector<int> memo(days.size(), INT_MAX);
        return recursive(days, costs, memo, 0, 0);
    }
};
