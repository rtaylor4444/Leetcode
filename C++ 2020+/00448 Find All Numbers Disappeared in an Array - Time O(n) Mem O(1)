//Run Time: 116ms - 84.59%
//Memory Usage: 34.1MB - 24.05%
//Solved
//Time O(n) Memory O(1)
class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        //Math?
        //1-n
        //1 + n+1 + n+2...n
        //1-8
        //1 + 2 + 3 + 4 + 5 + 6 + 7 + 8
        //36
        //1 + 2 + 2 + 3 + 3 + 4 + 7 + 8
        //30 - 2 -3 = 25
        //Bitwise are not useful here
        //Sorting would make it easy to find the missing element but its too slow
        //counting sort would take up additional memory as well as hashing
        //math cant seem to find a forumla
        //swaps?
        //[1,2,3,4,5,6,7,8]
        //[4,3,2,7,8,2,3,1]
        //Loop through nums once and mark the nums we find as neg
        //[-1,-2,-3,-4,5,6,-7,-8]
        //Use two pointers to find the missing unmarked elements
        //and swap them to the front
        //then just resize our vector to the missing ele size
        
        //Fill missing nums
        vector<int> missingNums(nums.size(), 0);
        for(int i = 0; i < nums.size(); ++i)
            missingNums[i] = i + 1;
        
        //Mark all the numbers that we have
        for(int i = 0; i < nums.size(); ++i) {
            //Continue if its already marked
            if(missingNums[nums[i] - 1] < 0) continue;
            missingNums[nums[i] - 1] *= -1;
        }
        //Two Pointers + Swaps
        int startPos = 0, endPos = 1;
        while(endPos < missingNums.size()) {
            //Start Pos has to be a neg number
            while(missingNums[startPos] > 0) ++startPos;
            if(startPos > endPos) endPos = startPos;
            //End Pos has to be a positive number
            while(endPos < missingNums.size() && missingNums[endPos] < 0) ++endPos;
            if(endPos == missingNums.size()) break;
            swap(missingNums[startPos], missingNums[endPos]);
        }
        missingNums.resize(startPos);
        return missingNums;
    }
};
