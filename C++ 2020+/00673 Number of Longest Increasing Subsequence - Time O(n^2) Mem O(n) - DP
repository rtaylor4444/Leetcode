//Run Time: 192ms - 6.15%
//Memory Usage: 13.6MB - 30.49%
//Solved =)
//Time O(n^2) Memory O(n)
class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        //[1,3,5,4,7]
        //[1,1,1,1,1]
        //[1,2,3,3,4]
        //[]
        //update/reset second array based off first array
        vector<int> dp(nums.size(), 1);
        vector<int> numLis(nums.size(), 1);
        int maxSize = 1;
        for(int i = 0; i < nums.size(); ++i) {
            for(int j = i+1; j < nums.size(); ++j) {
                if(nums[i] >= nums[j]) continue;
                int prevDP = dp[j];
                dp[j] = max(dp[j], dp[i] + 1);
                maxSize = max(maxSize, dp[j]);
                //Update/Reset LIS
                //greater - reset lis formed at this pos
                if(prevDP < dp[j]) numLis[j] = numLis[i];
                //same - update since there is an addition way
                else if(dp[i] + 1 == dp[j]) numLis[j] += numLis[i];
                //less - do nothing
            }
        }
        
        int numMax = 0;
        for(int i = 0; i < numLis.size(); ++i) {
            if(dp[i] == maxSize) numMax += numLis[i];
        }
        return numMax;
    }
};
