//Run Time: 16ms - 21.10%
//Memory Usage: 8.2MB - 22.76%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        //Sliding Window
        //Calc all differences then pick the subarray with the least cost
        
        //Get index costs
        vector<int> indexCost(s.size());
        for(int i = 0; i < s.size(); ++i) {
            indexCost[i] = abs(s[i] - t[i]);
        }
        
        //Sliding Window
        int l = 0, r = 0, currentCost = indexCost[0], maxSize = 0;
        while(r < s.size()) {
            //Make window larger if current cost is less than maxsize
            if(currentCost <= maxCost) {
                //keep track of maxsize we can make
                maxSize = max(maxSize, (r-l)+1);
                if(++r < s.size()) currentCost += indexCost[r];
            }
            //Make window smaller if current cost is greater than maxcost
            else {
                currentCost -= indexCost[l++];
            }
        }
        return maxSize;
    }
};
