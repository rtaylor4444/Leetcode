//Run Time: 493ms - 77.62%
//Memory Usage: 131.67MB - 99.03%
//Solved =)
//Time O(nlogn) Memory O(n)

struct MeetingTimeSort {
    bool operator()(vector<int>& a, vector<int>& b) {
        return a[2] < b[2];
    }
};

class DisjointSet {
    vector<int> nodes;
public:
    DisjointSet(int size) {
        nodes = vector<int>(size, 0);
        for(int i = 0; i < size; ++i)
            nodes[i] = i;
    }

    int getRoot(int node) {
        int root = node;
        while(nodes[root] != root) root = nodes[root];
        //path compression
        while(node != nodes[node]) {
            int prevNode = node;
            node = nodes[node];
            nodes[prevNode] = root;
        }
        return root;
    }

    void unite(int node1, int node2) {
        int root1 = getRoot(node1);
        int root2 = getRoot(node2);
        if(root1 == root2) return;
        nodes[root2] = root1;
    }

    void reset(int node) { 
        if(getRoot(0) == getRoot(node)) return;
        nodes[node] = node; 
    }

    vector<int> getNodesWithSecret() {
        vector<int> ans;
        int secretGroup = getRoot(0);
        for(int i = 0; i < nodes.size(); ++i) {
            if(getRoot(i) == secretGroup) ans.push_back(i);
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> findAllPeople(int n, vector<vector<int>>& meetings, int firstPerson) {
        //sort meetings based off the time
        //how to unite when meeting go off at the same time?
        //Union Find unite only with nodes that have secret
        //Then finally return all nodes in the same group as first person
        DisjointSet disjointSet(n);
        disjointSet.unite(0, firstPerson);
        sort(meetings.begin(), meetings.end(), MeetingTimeSort());
        int i = 0;
        while(i < meetings.size()) {
            //check if we have multiple meetings at the same time
            int j = i+1;
            if(j < meetings.size() and meetings[i][2] == meetings[j][2]) {
                //meetings are at the same time
                //pass one we unite all of the nodes together
                j = i;
                while(j < meetings.size() and meetings[i][2] == meetings[j][2]) {
                    disjointSet.unite(meetings[j][0], meetings[j][1]);
                    ++j;
                }
                //pass two we reset all of the nodes that do not have secret
                j = i;
                while(j < meetings.size() and meetings[i][2] == meetings[j][2]) {
                    disjointSet.reset(meetings[j][0]);
                    disjointSet.reset(meetings[j][1]);
                    ++j;
                }
                i = j;
            } else {
                //meetings are at different times
                int secretGroup = disjointSet.getRoot(0);
                int group1 = disjointSet.getRoot(meetings[i][0]);
                int group2 = disjointSet.getRoot(meetings[i][1]);
                if(group1 == secretGroup or group2 == secretGroup) {
                    disjointSet.unite(group1, group2);
                }
                ++i;
            }
        }
        return disjointSet.getNodesWithSecret();
    }
};
