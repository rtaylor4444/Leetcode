//Run Time: 141ms - 47.98%
//Memory Usage: 20.9MB - 20.96%
//Time O(n^2) Memory O(n^2)
class Solution {
public:
    vector<int> getValidTransformations(string& curWord, 
    unordered_map<string, int>& validWordToIndex, 
    vector<vector<bool>>& validLetters) {
        vector<int> validWords;
        for(int i = 0; i < curWord.size(); ++i) {
            char originalChar = curWord[i];
            for(int j = 0; j < validLetters[i].size(); ++j) {
                if(!validLetters[i][j]) continue;
                curWord[i] = 'a' + j;
                if(validWordToIndex.find(curWord) != validWordToIndex.end())
                    validWords.push_back(validWordToIndex[curWord]);
            }
            curWord[i] = originalChar;
        }
        return validWords;
    }

    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        //BFS + hashset
        //fill out info we need to validate a letter transformation
        unordered_map<string, int> validWordToIndex;
        vector<vector<bool>> validLetters(wordList[0].size(), vector<bool>(26, false));
        for(int i = 0; i < wordList.size(); ++i) {
            validWordToIndex.emplace(wordList[i], i);
            for(int j = 0; j < wordList[i].size(); ++j) {
                validLetters[j][wordList[i][j] - 'a'] = true;
            }
        }
        //exit if our endword is not in our wordlist
        if(validWordToIndex.find(endWord) == validWordToIndex.end()) return 0;

        //preform bfs to determine the shortest path to each word
        vector<int> wordToTransformSeqLength(wordList.size(), INT_MAX);
        int numIterations = 0;
        queue<string> bfs;
        bfs.push(beginWord);
        while(!bfs.empty()) {
            ++numIterations;
            for(int i = bfs.size(); i > 0; --i) {
                string curWord = bfs.front();
                bfs.pop(); 

                vector<int> indices = getValidTransformations(curWord,validWordToIndex, validLetters);
                for(int j = 0; j < indices.size(); ++j) {
                    if(wordToTransformSeqLength[indices[j]] <= numIterations)
                        continue;

                    wordToTransformSeqLength[indices[j]] = numIterations;
                    // cout << numIterations << ": added " << wordList[indices[j]] << endl;
                    bfs.push(wordList[indices[j]]);
                }
            }
        }
        int finalLength = wordToTransformSeqLength[validWordToIndex[endWord]];
        return finalLength == INT_MAX ? 0 : finalLength+1;
    }
};
