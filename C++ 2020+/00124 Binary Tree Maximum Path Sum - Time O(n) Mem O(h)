//Run Time: 12ms - 99.91%
//Memory Usage: 28.1MB - 68.63%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxPath;
public:
    int postOrder(TreeNode* node) {
        if(node == nullptr) return 0;
        //Pick best option to return to parent
        int leftPath = postOrder(node->left);
        int rightPath = postOrder(node->right);
        int localMaxPath = node->val + max(leftPath, rightPath);
        localMaxPath = max(node->val, localMaxPath);
        maxPath = max(maxPath, localMaxPath);
        //Calculate curves
        int curvePath = leftPath + node->val + rightPath;
        maxPath = max(maxPath, curvePath);
        return localMaxPath;
    }
    int maxPathSum(TreeNode* root) {
        maxPath = INT_MIN;
        postOrder(root);
        return maxPath;
    }
};
