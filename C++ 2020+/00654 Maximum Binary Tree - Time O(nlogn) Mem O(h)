//Run Time: 92ms - 92.61%
//Memory Usage: 44.4MB - 5.13%
//Solved =)
//Time O(nlogn) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* preOrderConstruct(vector<int>& nums, int l, int r) {
        //Find the maximum number
        if(l > r) return nullptr;
        int curMax = nums[l], maxIndex = l;
        for(int i = l; i <= r; ++i) {
            if(nums[i] > curMax) {
                curMax = nums[i];
                maxIndex = i;
            }
        }
        TreeNode* node = new TreeNode(nums[maxIndex]);
        node->left = preOrderConstruct(nums, l, maxIndex-1);
        node->right = preOrderConstruct(nums, maxIndex+1, r);
        return node;
        
    }
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return preOrderConstruct(nums, 0, nums.size() - 1);
    }
};
