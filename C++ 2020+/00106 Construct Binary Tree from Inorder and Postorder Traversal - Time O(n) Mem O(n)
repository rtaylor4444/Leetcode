//Run Time: 8ms - 98.44%
//Memory Usage: 26MB - 85.15%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* helper(vector<int>& inorder, int& i, vector<int>& postorder, int& p, int parentVal) {
        //Exit when we match the parent value
        if(i < 0 || inorder[i] == parentVal) return nullptr;
        TreeNode* node = new TreeNode(postorder[p--]);
        node->right = helper(inorder, i, postorder, p, node->val);
        if(node->val == inorder[i]) --i;
        node->left = helper(inorder, i, postorder, p, parentVal);
        return node;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        /*fail
        [2,1]
        [2,1]
        */
        //Last node in postorder is always the root
        //go to the right construct nodes in post order array reverse order
        //return when we match the inorder array
        //right mid left
        //i = [9,3,15,20,7]
        //     i
        //p = [9,15,7,20,3]
        //     p
        int i = inorder.size() - 1, p = postorder.size() - 1;
        return helper(inorder, i, postorder, p, -3001);
    }
};
