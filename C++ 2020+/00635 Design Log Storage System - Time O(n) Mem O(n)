//Run Time: 24ms - 38.97%%
//Memory Usage: 16MB - 26.47%
//Solved =)
//Time O(n) Memory O(n)
class LogSystem {  
    vector<int> toSeconds, indexToMax;
    unordered_map<string, int> granToIndex, stampToId;
    
    int parseChunk(string& time, int& i) {
        int value = 0;
        while(i < time.size() && time[i] != ':') {
            value *= 10;
            value += time[i++] - '0';
        }
        ++i;
        return value;
    }
    int stampToSeconds(string timestamp, int maxIndex, bool min) {
        int i = 0, index = 0;
        int totalSeconds = 0;
        int val = parseChunk(timestamp, i) - 1999;
        totalSeconds += val * toSeconds[index++];
        while(i < timestamp.size()) {
            //Skip other values (count them as 0 for min)
            if(min && index > maxIndex) break;
            //Exit when we reach the second mark
            else if(!min && index > 5) break;
            
            //Count as max if not min
            if(!min && index > maxIndex) val = indexToMax[index];
            else val = parseChunk(timestamp, i); 
            totalSeconds += val * toSeconds[index++];
        }
        return totalSeconds;
    }
public:
    LogSystem() {
        toSeconds = {32140800, 2678400, 86400, 3600, 60, 1};
        indexToMax = {18, 12, 31, 23, 59, 59};
        granToIndex = {{"Year", 0}, {"Month", 1}, {"Day", 2}, {"Hour", 3},
                       {"Minute", 4}, {"Second", 5}};
    }
    
    void put(int id, string timestamp) {
        stampToId.emplace(timestamp, id);
    }
    
    vector<int> retrieve(string start, string end, string granularity) {
        int maxIndex = granToIndex[granularity];
        int minSeconds = stampToSeconds(start, maxIndex, true);
        int maxSeconds = stampToSeconds(end, maxIndex, true);
        //cout << minSeconds << " - " << maxSeconds << endl;
        vector<int> idList;
        for(auto it = stampToId.begin(); it != stampToId.end(); ++it) {
            int curSeconds = stampToSeconds(it->first, maxIndex, true);
            if(curSeconds < minSeconds || curSeconds > maxSeconds)
                continue;
            
            idList.push_back(it->second);
        }
        return idList;
    }
};

/**
 * Your LogSystem object will be instantiated and called as such:
 * LogSystem* obj = new LogSystem();
 * obj->put(id,timestamp);
 * vector<int> param_2 = obj->retrieve(start,end,granularity);
 */
