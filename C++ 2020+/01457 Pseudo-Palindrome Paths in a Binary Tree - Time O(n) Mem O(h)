//Run Time: 204ms - 84.26%
//Memory Usage: 108.9MB - 5.74%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int numPaths;
public:
    void preOrder(TreeNode* node, int bitVector) {
        bitVector ^= (1 << node->val); 
        if(node->left == nullptr && node->right == nullptr) {
            if(__builtin_popcount(bitVector) < 2) ++numPaths;
        }
        
        if(node->left) preOrder(node->left, bitVector);
        if(node->right) preOrder(node->right, bitVector);
    }
    int pseudoPalindromicPaths (TreeNode* root) {
        //preOrder
        //numbers can be rearraged to make a palindrome
        numPaths = 0;
        preOrder(root, 0);
        return numPaths;
    }
};
