/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * class CustomFunction {
 * public:
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     int f(int x, int y);
 * };
 */

//Run Time: 4ms - 55.33%
//Memory Usage: 6.3MB - 72.83%
//Unoptimal Solution - Time needs improvement
//Time O(nlogn) Memory O(1)
class Solution {
public:
    int binarySearch(CustomFunction& customfunction, int x, int z) {
        int l = 1;
        int r = 1000;
        while(l <= r) {
            int y = l + ((r - l) / 2);
            //Exit Condition
            int result = customfunction.f(x, y);
            if(result == z)
                return y;
            
            if(result > z)
                r = y - 1;
            else
                l = y + 1;
        }
        return -1;
    }
    vector<vector<int>> findSolution(CustomFunction& customfunction, int z) {
        vector<vector<int>> solutions;
        for(int x = 1; x < 1001; ++x) {
            int y = binarySearch(customfunction, x, z);
            if(y < 0) continue;
            solutions.push_back({x,y});
        }
        return solutions;
    }
};
