//Run Time: 289ms - 69.42%
//Memory Usage: 5.9MB - 95.19%
//Solved =)
//Time O(nlogn) Memory O(n)

struct SortNums {
    vector<int>& nums;
    SortNums(vector<int>& n) : nums(n) {
        
    }
    bool operator()(int& a, int& b) {
        if(nums[a] > nums[b]) return true;
        else if(nums[a] < nums[b]) return false;
        return a > b;
    }
};
class Solution {
public:
    long long findScore(vector<int>& nums) {
        //Priority Queue
        SortNums sortNums(nums);
        priority_queue<int, vector<int>, decltype(sortNums)> pq(sortNums);
        for(int i = 0; i < nums.size(); ++i) pq.push(i);

        long long score = 0;
        vector<bool> marked(nums.size(), false);
        while(!pq.empty()) {
            int index = pq.top();
            pq.pop();
            if(marked[index]) continue;
            score += nums[index];
            //cout << "picked: " << index  << " -> " << nums[index] << endl;
            marked[index] = true;
            if(index-1 >= 0) marked[index-1] = true;
            if(index+1 < nums.size()) marked[index+1] = true;
        }
        return score;
    }
};
