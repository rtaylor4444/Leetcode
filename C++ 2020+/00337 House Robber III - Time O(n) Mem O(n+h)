//Run Time: 32ms - 34.17%
//Memory Usage: 26.4MB - 26.94%
//Solved =)
//Time O(n) Memory O(n+h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<TreeNode*, int> nodeToMax;
public:
    //postOrder with a unordered_map node->max Value
    void postOrder(TreeNode* node) {
        //Just store our value if we are a leaf;
        if(node->left == nullptr && node->right == nullptr) {
            nodeToMax.emplace(node, node->val);
            return;
        }
        int grandchildMax = 0;
        if(node->left) {
            postOrder(node->left);
            grandchildMax += nodeToMax[node->left->left] + nodeToMax[node->left->right];
        }
        if(node->right) {
            postOrder(node->right);
            grandchildMax += nodeToMax[node->right->left] + nodeToMax[node->right->right];
        }
        int childMax = nodeToMax[node->left] + nodeToMax[node->right];
        nodeToMax.emplace(node, max(node->val + grandchildMax, childMax));
    }
    int rob(TreeNode* root) {
        //Level Order traversal
        if(root == nullptr) return 0;
        nodeToMax.clear();
        nodeToMax.emplace(nullptr, 0);
        postOrder(root);
        return nodeToMax[root];
    }
};
