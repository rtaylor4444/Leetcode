//Run Time: 40ms - 99.46%
//Memory Usage: 35MB - 93.17%
//Unoptimal Solution -Speed needs improvement??
//-Perhaps using a hashset has some overhead which make it run slower?
//Time O(nlogn) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findNumber(TreeNode* root, TreeNode* node, int n) {
        while(root) {
            if(root->val == n && node != root) return true;
            else if(root->val > n) root = root->left;
            else root = root->right;
        }
        return false;
    }
    bool findTarget(TreeNode* root, int k) {
        //nlogn test every number in the tree
        //DFS - since we can short curcuit
        if(root == nullptr) return nullptr;
        TreeNode* curNode;
        stack<TreeNode*> dfs;
        dfs.push(root);
        while(!dfs.empty()) {
            curNode = dfs.top();
            dfs.pop();
            
            if(findNumber(root, curNode, k - curNode->val))
                return true;
            
            if(curNode->left) dfs.push(curNode->left);
            if(curNode->right) dfs.push(curNode->right);
        }
        return false;
    }
};
