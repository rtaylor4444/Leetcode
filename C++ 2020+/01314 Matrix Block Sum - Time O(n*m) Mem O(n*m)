//Run Time: 12ms - 96.71%
//Memory Usage: 9.8MB - 81.42%
//Solved =)
//Time O(m * n) Memory O(m * n)
class Solution {
public:
    vector<vector<int>> matrixBlockSum(vector<vector<int>>& mat, int K) {
        vector<vector<int>> calculatedSums(mat.size(), vector<int>(mat[0].size(), 0));
        //Pre calculate our sums for optimization
        for(int i = 0; i < mat.size(); ++i) {
            for(int j = 0; j < mat[i].size(); ++j) {
                int topRow = (i-1 >= 0) ? calculatedSums[i-1][j] : 0;
                int prevCol = (j-1 >= 0) ? calculatedSums[i][j-1] : 0;
                //This value was added twice so we must remove it
                int extraVal = (i-1 >= 0 && j-1 >= 0) ? calculatedSums[i-1][j-1] : 0;
                calculatedSums[i][j] = mat[i][j] + topRow + prevCol - extraVal;
                //cout << calculatedSums[i][j] << " ";
            }
            //cout << endl;
        }
        //Get our block sums
        vector<vector<int>> blockSums(mat.size(), vector<int>(mat[0].size(), 0));
        for(int i = 0; i < mat.size(); ++i) {
            for(int j = 0; j < mat[i].size(); ++j) {
                int maxY = min((int)mat.size() - 1, i + K);
                int maxX = min((int)mat[i].size() - 1, j + K);
                int topRow = (i-(K+1) >= 0) ? calculatedSums[i-(K+1)][maxX] : 0;
                int prevCol = (j-(K+1) >= 0) ? calculatedSums[maxY][j-(K+1)] : 0;
                blockSums[i][j] = calculatedSums[maxY][maxX];
                blockSums[i][j] -= (topRow + prevCol);
                //This value was removed twice so we must add it
                int extraVal = (i-(K+1) >= 0 && j-(K+1) >= 0) ? calculatedSums[i-(K+1)][j-(K+1)] : 0;
                blockSums[i][j] += extraVal;
            }
        }
        return blockSums;
    }
};
