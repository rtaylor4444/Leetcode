//Run Time: 12ms - 28.39%
//Memory Usage: 16.7MB - 20.36%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool isSymmetric(TreeNode* root) {
        //Iterative - short curcuit - preorder
        if(root == nullptr) return true;
        stack<TreeNode*> preorder;
        TreeNode *tree1, *tree2;
        preorder.push(root->right);
        preorder.push(root->left);
        while(!preorder.empty()) {
            tree1 = preorder.top();
            preorder.pop();
            tree2 = preorder.top();
            preorder.pop();
            //check nulls
            if(tree1 == nullptr && tree2 == nullptr)
                continue;
            else if(tree1 == nullptr || tree2 == nullptr)
                return false;
            //check values
            if(tree1->val != tree2->val)
                return false;
            //tree2 then tree1 bc fifo
            //Value one
            preorder.push(tree2->right);
            preorder.push(tree1->left);
            //Value two
            preorder.push(tree2->left);
            preorder.push(tree1->right);
        }
        return true;
    }
};
