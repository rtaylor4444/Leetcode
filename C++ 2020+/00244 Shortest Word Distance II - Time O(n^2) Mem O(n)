//Run Time: 32ms - 81.69%
//Memory Usage: 5.9MB - 89.72%
//Unoptimal Solution - Time needs improvement
//Time O(n^2) Memory O(n)
class WordDistance {
    unordered_map<string, vector<int>> wordToPos;
public:
    WordDistance(vector<string>& wordsDict) {
        for(int i = 0; i < wordsDict.size(); ++i) {
            if(wordToPos.find(wordsDict[i]) == wordToPos.end())
                wordToPos.emplace(wordsDict[i], vector<int>());
            wordToPos[wordsDict[i]].push_back(i);
        }
    }
    
    int shortest(string word1, string word2) {
        vector<int>& list1 = wordToPos[word1];
        vector<int>& list2 = wordToPos[word2];
        int shortest = INT_MAX;
        for(int i = 0; i < list1.size(); ++i) {
            for(int j = 0; j < list2.size(); ++j) {
                shortest = min(shortest, abs(list1[i] - list2[j]));
            }
        }
        return shortest;
    }
};

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance* obj = new WordDistance(wordsDict);
 * int param_1 = obj->shortest(word1,word2);
 */
