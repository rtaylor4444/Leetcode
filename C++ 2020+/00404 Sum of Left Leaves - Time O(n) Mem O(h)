//Run Time: 4ms - 84.25%
//Memory Usage: 13.6MB - 51.63%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumHelper(TreeNode* node, bool isLeft) {
        if(node == nullptr) return 0;
        //Left leaf only
        if(isLeft && node->left == nullptr && node->right == nullptr)
            return node->val;
        
        return sumHelper(node->left, true) + sumHelper(node->right, false);
    }
    int sumOfLeftLeaves(TreeNode* root) {
        return sumHelper(root, false);
    }
};
