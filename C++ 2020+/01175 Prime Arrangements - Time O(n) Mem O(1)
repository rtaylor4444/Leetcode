//Run Time: 0ms - 100.00%
//Memory Usage: 6.3MB - 12.05%
//Solved =)
//Time O(n) Memory O(1)
class Solution {
public:
    int numPrimeArrangements(int n) {
        //I could calc all permutations and count the valid ones
        //but this would be really slow
        //How many primes are in n?
        //primes can be in same position and composite in diff position
        //and that would count as a diff permutation
        //So we must calc both
        
        //Count primes in n (we also get composite count)
        int numPrimes = 0;
        vector<int> primes = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97};
        for(int i = 0; i < primes.size(); ++i) {
            if(primes[i] > n) break;
            numPrimes++;
        }
        //Answer is factoral of primes * factorial of composite
        int mod = 1e9 + 7;
        long ans = 1;
        //Modular Math to prevent overflow
        //Prime Factorial
        for(int i = 2; i <= numPrimes; ++i) ans = (ans * i) % mod;
        //Composite Factorial
        for(int i = 2; i <= n-numPrimes; ++i) ans = (ans * i) % mod;
        return ans;
    }
};
