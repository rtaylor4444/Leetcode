//Run Time: 324ms - 17.22%
//Memory Usage: 29.5MB - 16.40%
//Unoptimal Solution - Time needs improvement
//Time O(n*logn) Memory O(n)
class Solution {
public:
    int nthUglyNumber(int n) {
        //Generate all ugly numbers up to n
        if(n < 1) return 0;
        //1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 14(cant factor by 7), 15, 16
        //1 => 1 * 2, 1 * 3, 1 * 5 => 2,3,5
        //2 => 2 * 2, 2 * 3, 2 * 5 => 4,6,10
        //3 => 3 * 2, 3 * 3, 3 * 5 => 6,9,15
        //4 => 4 * 2, 4 * 3, 4 * 5 => 8,12,20 
        //5 => 5 * 2, 5 * 3, 5 * 5 => 10,15,25 
        //place generated numbers in a heap?
        //when heap size + used numbers = 1690 break
        long curNum = 1;
        unordered_set<int> usedNums;
        priority_queue<int, vector<int>, greater<int>> p_q;
        vector<int> factors = {2,3,5};
        while(n-1) {
            for(int i = 0; i < factors.size(); ++i) {
                long nextNum = curNum * factors[i];
                if(nextNum >= INT_MAX) break;
                if(usedNums.find(nextNum) != usedNums.end())
                    continue;
                usedNums.emplace(nextNum);
                p_q.push(nextNum);
            }
            curNum = p_q.top();
            p_q.pop();
            --n;
        }
        return (int)curNum;
    }
};
