//Run Time: 40ms - 52.12%
//Memory Usage: 26.2MB - 62.58%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(string& s, int& i) {
        //Parse the value
        int val = INT_MAX, sign = 1;
        for(; i < s.size(); ++i) {
            //check for the sign
            if(s[i] == '-') {
                sign = -1;
                continue;
            }
            else if(s[i] < '0' || s[i] > '9') break;
            
            if(val == INT_MAX) val = 0;
            val *= 10;
            val += s[i] - '0';
        }
        if(val == INT_MAX) return nullptr;
        TreeNode* node = new TreeNode(val * sign);
        //Check if we are a leaf node
        if(s[i] == ')') {
            ++i;
            return node;
        }
        if(s[i] == '(') node->left = constructTree(s, ++i);
        if(s[i] == '(') node->right = constructTree(s, ++i);
        if(s[i] == ')') ++i;
        return node;
    }
    TreeNode* str2tree(string s) {
        int i = 0;
        return constructTree(s, i);
    }
};
