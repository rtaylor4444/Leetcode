//Run Time: 28ms - 34.54%
//Memory Usage: 25MB - 16.98%
//Solved =)
//n = number of nodes
//h = hieght of the tree
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* binarySearch(int l, int r, vector<int>& nums) {
        if(l > r) return nullptr;
        int m = l + ((r - l) / 2);
        TreeNode* newNode = new TreeNode(nums[m]);
        newNode->left = binarySearch(l, m - 1, nums);
        newNode->right = binarySearch(m + 1, r, nums);
        return newNode;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return binarySearch(0, nums.size() - 1, nums);
    }
};
