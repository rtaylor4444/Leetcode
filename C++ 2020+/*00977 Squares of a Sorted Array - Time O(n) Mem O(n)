//Run Time: 40ms - 99.01%
//Memory Usage: 28MB - 5.35%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        //O(n log n) sqaure each value then just sort the array
        //Array is already partially sorted, can we perform a merge?
        //For merge we have to create a new array which takes up memory
        //So can we do this in-place? Utilizing array swaps?
        
        //Seperate into two list pos and neg
        vector<int> pos, neg;
        for(int i = 0; i < nums.size(); ++i) {
            if(nums[i] < 0) neg.push_back(nums[i] * nums[i]);
            else pos.push_back(nums[i] * nums[i]);
        }
        //Merge into new list
        vector<int> sortedNums(nums.size(), 0);
        int p1 = 0, p2 = pos.size() -1, i = nums.size() - 1;
        while(p1 < neg.size() && p2 >= 0) {
            if(neg[p1] > pos[p2]) sortedNums[i--] = neg[p1++];
            else sortedNums[i--] = pos[p2--];
        }
        //Merge leftovers
        while(p1 < neg.size()) sortedNums[i--] = neg[p1++];
        while(p2 >= 0) sortedNums[i--] = pos[p2--];
        return sortedNums;
    }
};
