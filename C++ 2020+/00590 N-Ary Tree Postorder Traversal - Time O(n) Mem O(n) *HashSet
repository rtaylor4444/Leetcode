/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
//Run Time: 48ms - 57.41%
//Memory Usage: 12.1MB - 14.66%
//Unoptimal Solution - Memory needs improvement
//n = number of nodes
//Time O(n) Memory O(n)
class Solution {
public:
    vector<int> postorder(Node* root) {
        vector<int> ans;
        if(root == nullptr) return ans;
        Node* curNode = root;
        stack<Node*> postorder;
        unordered_set<Node*> processedNodes;
        postorder.push(root);
        while(!postorder.empty()) {
            while(true) {
                //Exit if we are a leaf node
                curNode = postorder.top();
                if(curNode->children.empty()) break;
                bool isChildProcessed = false;
                //Populate our stack with our children
                for(int i = curNode->children.size() - 1; i >= 0; --i) {
                    if(processedNodes.find(curNode->children[i]) != processedNodes.end()) {
                        isChildProcessed = true;
                        break;
                    }
                    postorder.push(curNode->children[i]);
                }
                //Exit if our children were processed already
                if(isChildProcessed) break;
            }
            
            curNode = postorder.top();
            postorder.pop();
            processedNodes.emplace(curNode);
            ans.push_back(curNode->val);
        }
        return ans;
    }
};
