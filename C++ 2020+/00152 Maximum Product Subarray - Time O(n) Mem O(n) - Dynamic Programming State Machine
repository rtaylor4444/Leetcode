//Run Time: 8ms - 55.84%
//Memory Usage: 12.1MB - 26.66%%
//Solved =)
//Time O(n)) Memory O(n)
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        //Dynamic Programming - State Machine
        //*zeros reset your count
        //0 = max, 1 = min
        int result = INT_MIN;
        vector<vector<int>> dp(2, vector<int>(nums.size()+1, 1));
        for(int i = 0; i < nums.size(); ++i) {
            //Get maxmimum value
            dp[0][i+1] = max(dp[0][i] * nums[i], dp[1][i] * nums[i]); 
            //compare if previous result is worth it over current
            dp[0][i+1] = max(dp[0][i+1], nums[i]);
            //Get minimum value
            dp[1][i+1] = min(dp[0][i] * nums[i], dp[1][i] * nums[i]); 
            //compare if previous result is worth it over current
            dp[1][i+1] = min(dp[1][i+1], nums[i]);
            result = max(result, dp[0][i+1]);
        }
        return result;
    }
};
