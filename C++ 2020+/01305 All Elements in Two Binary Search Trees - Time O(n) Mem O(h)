//Run Time: 176ms - 97.96%
//Memory Usage: 85.4MB - 5.46%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* inOrderIter(stack<TreeNode*>& inOrder, TreeNode*& it) {
        while(it) {
            inOrder.push(it);
            it = it->left;
        }
        if(inOrder.empty()) return nullptr;
        
        it = inOrder.top();
        inOrder.pop();
        TreeNode* curNode = it;
        
        it = it->right;
        return curNode;
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        //binary tree merge sort
        vector<int> elements;
        TreeNode *it1 = root1, *it2 = root2;
        stack<TreeNode*> inOrder1, inOrder2;
        TreeNode *curNode1 = inOrderIter(inOrder1, it1);
        TreeNode *curNode2 = inOrderIter(inOrder2, it2);
        while(curNode1 && curNode2) {
            if(curNode1->val < curNode2->val) {
                elements.push_back(curNode1->val);
                curNode1 = inOrderIter(inOrder1, it1);
            }
            else {
                elements.push_back(curNode2->val);
                curNode2 = inOrderIter(inOrder2, it2);
            }
        }
        //Add leftovers
        while(curNode1) {
            elements.push_back(curNode1->val);
            curNode1 = inOrderIter(inOrder1, it1);
        }
        while(curNode2) {
            elements.push_back(curNode2->val);
            curNode2 = inOrderIter(inOrder2, it2);
        }
        return elements;
    }
};
