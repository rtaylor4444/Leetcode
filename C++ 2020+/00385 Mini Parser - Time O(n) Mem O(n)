//Run Time: 8ms - 86.84%
//Memory Usage: 14.9MB - 16.45%
//Solved =)
//Time O(n) Memory O(n)
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Constructor initializes an empty nested list.
 *     NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     NestedInteger(int value);
 *
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Set this NestedInteger to hold a single integer.
 *     void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     void add(const NestedInteger &ni);
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class Solution {
public:
    NestedInteger helper(string& s, int &i) {
        NestedInteger ni, nl;
        int curValue = INT_MAX, sign = 1;
        //check if we are making a list for not for return value
        bool isList = (s[i] == '[');
        if(isList) ++i;
        for(; i < s.size(); ++i) {
            if(s[i] >= '0' && s[i] <= '9') {
                if(curValue == INT_MAX) curValue = 0;
                curValue *= 10;
                curValue += s[i] - '0';
                ni.setInteger(curValue * sign);
            }
            else if(s[i] == '-') sign = -1;
            else if(s[i] == ',') {
                //add current value
                if(curValue != INT_MAX) nl.add(ni);
                //reset curValue
                curValue = INT_MAX;
                sign = 1;
            }
            else if(s[i] == '[') {
                nl.add(helper(s, i));
            }
            else if(s[i] == ']') {
                if(curValue != INT_MAX) nl.add(ni);
                break;
            }
        }
        return isList ? nl : ni;
    }
    NestedInteger deserialize(string s) {
        int i = 0;
        return helper(s, i);
    }
};
