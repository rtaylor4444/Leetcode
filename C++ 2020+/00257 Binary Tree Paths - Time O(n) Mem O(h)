//Run Time: 8ms - 47.12%
//Memory Usage: 13.6MB - 77.07%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void treePathsHelper(TreeNode* node, string curString, vector<string>& pathList) {
        //Assuming node isnt null
        curString += to_string(node->val);
        if(node->left == nullptr && node->right == nullptr) {
            pathList.push_back(curString);
        }
        if(node->left){
            treePathsHelper(node->left, curString + "->", pathList);
        }
        
        if(node->right) {
            treePathsHelper(node->right, curString + "->", pathList);
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        if(root == nullptr) return {};
        vector<string> pathList;
        string curString;
        treePathsHelper(root, curString, pathList);
        return pathList;
    }
};
