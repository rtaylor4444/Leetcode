//Run Time: 20ms - 95.80%
//Memory Usage: 11.8MB - 48.21%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    int getSmallestCharFreq(string& word) {
        //BUG - Optimization knowing we only need
        //the smallest char?
        //HeapSort 
        int count[26] = {0};
        for(int i = 0; i < word.size(); ++i) {
            count[word[i] - 'a']++;
        }
        int freq = 0;
        for(int i = 0; i < 26; ++i) {
            if(count[i] == 0) continue;
            freq = count[i];
            break;
        }
        return freq;
    }
    vector<int> numSmallerByFrequency(vector<string>& queries, vector<string>& words) {
        //freq of smallest char compare with query
        //keep track of the number of words query succeeds
        //return the result only if comparsion passes?        
        //Calculate the total count of frequencies we have
        vector<int> numWordFreqs(12, 0);
        for(int i = 0; i < words.size(); ++i) {
            numWordFreqs[getSmallestCharFreq(words[i])]++;
        }
        //For each freq determine how many are more than us
        vector<int> freqGreater(12, 0);
        for(int i = 10; i >= 0; --i) {
            freqGreater[i] = freqGreater[i+1] + numWordFreqs[i+1]; 
        }
        
        vector<int> ans(queries.size(), 0);
        for(int i = 0; i < queries.size(); ++i) {
            int curQueryFreq = getSmallestCharFreq(queries[i]);
            ans[i] = freqGreater[curQueryFreq];
        }
        return ans;
    }
};
