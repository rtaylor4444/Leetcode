//Run Time: 4ms - 89.40%
//Memory Usage: 8.1MB - 99.33%
//Solved =)
//Time O(n) Memory O(1)
class Solution {
public:
    int heightChecker(vector<int>& heights) {
        //sort a copy and compare the two might be a way to solve - O(nlogn)
        //Use counting sort for O(n)
        //Find the count of each element
        int count[101] = {0};
        for(int i = 0; i < heights.size(); ++i) {
            count[heights[i]]++;
        }
        //Determine which elements are out of order based on count
        int curIndex = 0;
        int numMoves = 0;
        for(int i = 0; i < 101; ++i) {
            if(curIndex >= heights.size()) break;
            while(count[i] > 0) {
                if(i != heights[curIndex])
                    ++numMoves;
                ++curIndex;
                --count[i];
            }
        }
        return numMoves;
    }
};
