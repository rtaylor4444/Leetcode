//Run Time: 60ms - 61.61%
//Memory Usage: 38.8MB - 5.65%
//Unoptimal Solution - Memory needs improvement
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int maxDepth;
    unordered_map<int, int> depthToSum;
public:
    void postOrder(TreeNode* root, int curDepth) {
        maxDepth = max(curDepth, maxDepth);
        if(root->left == nullptr && root->right == nullptr) {
            if(depthToSum.find(curDepth) == depthToSum.end())
                depthToSum.emplace(curDepth, 0);
            
            depthToSum[curDepth] += root->val;
            return;
        }
        if(root->left) postOrder(root->left, curDepth+1);
        if(root->right) postOrder(root->right, curDepth+1);
    }
    int deepestLeavesSum(TreeNode* root) {
        if(root == nullptr) return 0;
        depthToSum.clear();
        maxDepth = 0;
        postOrder(root, 0);
        return depthToSum[maxDepth];
    }
};
