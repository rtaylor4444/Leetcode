//Run Time: 105ms - 55.40%
//Memory Usage: 28.7MB - 49.64%
//Solved =)
//Time O(nm*log(min(n,m))) Memory O(nm)

class Solution {
public:
    bool isValidLength(vector<vector<int>>& prefixSum, vector<vector<int>>& mat, int threshold, int length) {
      for(int i = 0; i < mat.size() - length; ++i) {
            for(int j = 0; j < mat[i].size() - length; ++j) {
                int totalSum = prefixSum[i+length+1][j+length+1];
                //remove the top row
                totalSum -= prefixSum[i][j+length+1];
                //remove the remaining left col
                int missingLeft = prefixSum[i+length+1][j];
                missingLeft -= prefixSum[i][j];
                totalSum -= missingLeft;
                if(totalSum <= threshold) return true;
            }
        }
        return false;
    }
    int maxSideLength(vector<vector<int>>& mat, int threshold) {
        //calc prefix sum
        vector<vector<int>> prefixSum(mat.size()+1, vector<int>(mat[0].size()+1, 0));
        for(int i = 0; i < mat.size(); ++i) {
            int sum = 0;
            for(int j = 0; j < mat[i].size(); ++j) {
                int preRowSum = i-1 >= 0 ? prefixSum[i][j+1] : 0;
                sum += mat[i][j];
                prefixSum[i+1][j+1] = sum + preRowSum;
            }
        }

        //get max side length
        int maxLength = 0;
        int l = 0, r = min(mat.size(), mat[0].size());
        while(l <= r) {
          int m = l + ((r-l)/2);
          if(isValidLength(prefixSum, mat, threshold, m)) {
            maxLength = m+1;
            l = m+1;
          } else r = m-1;
        }
        return maxLength;
    }
};
