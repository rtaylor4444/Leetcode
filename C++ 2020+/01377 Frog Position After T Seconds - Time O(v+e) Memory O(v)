//Run Time: 20ms - 47.04%
//Memory Usage: 15.7MB - 58.87%
//Solved =)
//Time O(v+e) Memory O(v)

class Solution {
public:
    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {
        //BFS - since we are bounded by the seconds
        //jumping forever on one position, how do I handle?
        //-previous positions get set to 0 since we are no longer on them
        //-getting stuck on a node maintains its probability
        vector<vector<int>> adjList(n+1, vector<int>());
        for(int i = 0; i < edges.size(); ++i) {
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        vector<double> prob(n+1, 0.0f);
        vector<bool> visited(n+1, false);
        queue<int> bfs;
        bfs.push(1);
        int numIterations = 0;
        prob[1] = 1.0f;
        while(!bfs.empty()) {
            for(int i = bfs.size() - 1; i >= 0; --i) {
                int curNode = bfs.front();
                bfs.pop();

                if(visited[curNode]) continue;
                visited[curNode] = true;

                double numValidEdges = 0.0f;
                int prevSize = bfs.size();
                for(int j = 0; j < adjList[curNode].size(); ++j) {
                    int nextNode = adjList[curNode][j];
                    if(visited[nextNode]) continue;
                    numValidEdges += 1.0f;
                    bfs.push(nextNode);
                    
                }

                for(int j = 0; j < adjList[curNode].size(); ++j) {
                    int nextNode = adjList[curNode][j];
                    if(visited[nextNode]) continue;
                    prob[nextNode] = prob[curNode] / numValidEdges;
                }
                //set probability to 0 if we are no longer on that node
                if(prevSize != (int)bfs.size()) prob[curNode] = 0.0f;
            }
            if(++numIterations == t) break;
        }
        return prob[target];
    }
};
