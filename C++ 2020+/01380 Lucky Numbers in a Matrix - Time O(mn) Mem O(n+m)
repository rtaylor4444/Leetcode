//Run Time: 40ms - 61.00%
//Memory Usage: 11.9MB - 41.06%
//Unoptimal Solution - Memory needs improvement
//m == number of rows
//n == number of columns
//Time O(nm) Memory O(n+m)
class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        //calc minimum element in each row and max element in each column
        //reference these values when we loop through matrix final time
        vector<int> minRow(matrix.size(), INT_MAX), maxCol(matrix[0].size(), INT_MIN);
        for(int i = 0; i < matrix.size(); ++i) {
            for(int j = 0; j < matrix[0].size(); ++j) {
                minRow[i] = min(minRow[i], matrix[i][j]);
                maxCol[j] = max(maxCol[j], matrix[i][j]);
            }
        }
        
        vector<int> nums;
        for(int i = 0; i < matrix.size(); ++i) {
            for(int j = 0; j < matrix[0].size(); ++j) {
                if(matrix[i][j] != minRow[i] ||
                  matrix[i][j] != maxCol[j]) continue;
                nums.push_back(matrix[i][j]);
            }
        }
        return nums;
    }
};
