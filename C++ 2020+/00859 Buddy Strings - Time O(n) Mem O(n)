//Run Time: 4ms - 99.89%
//Memory Usage: 7.2MB - 17.85%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    bool buddyStrings(string A, string B) {
        //*they have to be in the same order
        //*same count, diff count its impossible
        //*same size
        //*only two mismatches
        //Strings must be same size
        if(A.size() != B.size()) return false;

        //Find mismatches
        vector<int> mismatchIndices;
        mismatchIndices.reserve(2);
        for(int i = 0; i < A.size(); ++i) {
            if(A[i] != B[i]) 
                mismatchIndices.push_back(i);
        }
        //If exactly two mismatches determine if swap can be made
        if(mismatchIndices.size() == 2) 
            return (A[mismatchIndices[0]] == B[mismatchIndices[1]] &&
                    B[mismatchIndices[0]] == A[mismatchIndices[1]]);
        else if(!mismatchIndices.empty())
            return false;
        
        //No mismatches so there must be at least two of a character
        //for swap to be possible
        vector<bool> seenChars(26, false);
        for(int i = 0; i < A.size(); ++i) {
            if(seenChars[A[i] - 'a']) return true;
            seenChars[A[i] - 'a'] = true;
        }
        return false;
    }
};
