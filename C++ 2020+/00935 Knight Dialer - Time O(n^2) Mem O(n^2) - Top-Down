//Run Time: 332ms - 28.28%
//Memory Usage: 38.2MB - 22.06%
//Unoptimal Solution - Time/Memory needs improvement
//Time O(n^2) Memory O(n^2)
class Solution {
    int mod;
    vector<vector<int>> choices;
public:
    Solution() {
        mod = 1000000007;
        choices = {{4,6}, {6,8}, {7,9}, {4,8}, {0,3,9}, {}, {0,1,7}, {2,6}, {1,3}, {2,4}};
    }
    int calcMoves(vector<vector<int>>& dp, int choice, int n) {
        if(n == 0) return 1;
        if(dp[n][choice] != INT_MAX) {
            return dp[n][choice];
        }
        
        long validNumbers = 0;
        for(int i = 0; i < choices[choice].size(); ++i) {
            validNumbers += (calcMoves(dp, choices[choice][i], n-1) % mod);
            validNumbers %= mod;
        }
        dp[n][choice] = (int)validNumbers;
        return dp[n][choice];
    }
    int knightDialer(int n) {
        //0 => 4, 6
        //1 => 6, 8
        //2 => 7, 9
        //3 => 4, 8
        //4 => 0, 3, 9
        //5 => -
        //6 => 0, 1, 7
        //7 => 2, 6
        //8 => 1, 3
        //9 => 2, 4
        //5 can only be used if n == 1
        //Backtrack recursive
        //every time we make a jump we have 2-3 choices
        //states: n and number picked
        //dp[n][number] = numbers dialed
        long totalMoves = 0;
        vector<vector<int>> dp(n+1, vector<int>(10, INT_MAX));
        for(int i = 0; i < 10; ++i) {
            totalMoves += (calcMoves(dp, i, n-1) % mod);
            totalMoves %= mod;
        }
        return (int)totalMoves;
    }
};
