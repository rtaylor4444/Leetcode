//Run Time: 36ms - 29.52%
//Memory Usage: 15.8MB - 49.06%
//Solved =)
//Time O(1) Memory O(n^2)
class NumMatrix {
    vector<vector<int>> sums;
public:
    NumMatrix(vector<vector<int>>& matrix) {
        //pre calc sums
        if(matrix.empty()) return;
        sums = vector<vector<int>>(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i = 0; i < matrix.size(); ++i) {
            int curSum = 0;
            for(int j = 0; j < matrix[i].size(); ++j) {
                int topSum = (i-1 >= 0) ? sums[i-1][j] : 0;
                curSum += matrix[i][j];
                sums[i][j] = curSum + topSum;
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        //Deduct calulated top and left sums outside of region
        int top = (row1-1 >= 0) ? sums[row1-1][col2] : 0;
        int left = (col1-1 >= 0) ? sums[row2][col1-1] : 0;
        //since we would deducte the upper top corner twice add it back
        int upperLeft = (row1-1 >= 0 && col1-1 >= 0) ? sums[row1-1][col1-1] : 0;
        return sums[row2][col2] + upperLeft - (top + left);
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
