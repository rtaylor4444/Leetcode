//Run Time: 16ms - 91.90%
//Memory Usage: 16.8MB - 92.14%
//Solved =)
//Time O(n) Memory O(1)
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        //Perfect Binary Tree
        //parents left points to parents right
        //parents right points to its next left
        if(root == nullptr) return root;
        Node* curNode = root;
        while(curNode->left) {
            Node* nextNode = curNode->left;
            Node* prevNode = nullptr;
            //traverse this pointer like a linked list
            while(curNode) {
                //fix pointers
                curNode->left->next = curNode->right;
                if(prevNode) prevNode->right->next = curNode->left;
                prevNode = curNode;
                curNode = curNode->next;
            }
            curNode = nextNode;
        }
        return root;
    }
};
