//Run Time: 0ms - 100.00%
//Memory Usage: 9.6MB - 96.99%
//Solved =)
//Time O(h) Memory O(h)
//This can be a confusing problem see this for help:
//https://www.programmerall.com/article/9762500599/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* newRoot;
public:
    void flipTree(TreeNode* parent, TreeNode* node, TreeNode* rightSib) {
        if(!node) return;
        flipTree(node, node->left, node->right);
        node->left = rightSib;
        node->right = parent;
        if(!newRoot) newRoot = node;
    }
    TreeNode* upsideDownBinaryTree(TreeNode* root) {
        newRoot = nullptr;
        flipTree(nullptr, root, nullptr);
        return newRoot;
    }
};
