/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeInBetween(ListNode* list1, int a, int b, ListNode* list2) {
        //Edges cases
        //a cannot be first in list
        //b cannot be last in list
        //list1 and list2 always valid size
        //Get list2's final node
        ListNode* list2Tail = list2;
        while(list2Tail->next) {
            list2Tail = list2Tail->next;
        }
        //Node before a
        int nodeCount = 0;
        ListNode *curNode = list1, *prevNodeBeforeA;
        while(curNode && nodeCount != a) {
            prevNodeBeforeA = curNode;
            curNode = curNode->next;
            ++nodeCount;
        }
        //Node after b
        while(curNode && nodeCount != b) {
            curNode = curNode->next;
            ++nodeCount;
        }
        ListNode *nextNodeAfterB = curNode->next;
        //Place list2 between Node before a and node after b
        prevNodeBeforeA->next = list2;
        list2Tail->next = nextNodeAfterB;
        return list1;
    }
};
