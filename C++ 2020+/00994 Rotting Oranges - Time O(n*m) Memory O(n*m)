//Run Time: 0ms - 100.00%
//Memory Usage: 5.9MB - 74.49%
//Solved =)
//Time O(n*m) Memory O(n*m)

class Solution {
public:
    bool isValid(vector<vector<int>>& grid, int i, int j, int i2, int j2) {
        if(i2 < 0 || j2 < 0) return false;
        if(i2 >= grid.size() || j2 >= grid[i2].size()) return false;
        return grid[i2][j2] == 1;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        //get starting rotting oranges
        int numFresh = 0;
        queue<pair<int, int>> levelOrder;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                if(grid[i][j] == 2) levelOrder.push(make_pair(i, j));
                else if(grid[i][j] == 1) ++numFresh;
            }
        }
        //Exit if no fresh oranges
        if(numFresh == 0) return 0;

        int minutesPassed = 0;
        while(!levelOrder.empty()) {
            for(int i = levelOrder.size()-1; i >= 0; --i) {
                pair<int, int> pos = levelOrder.front();
                levelOrder.pop();

                if(isValid(grid, pos.first, pos.second, pos.first+1, pos.second)) {
                    levelOrder.push(make_pair(pos.first+1, pos.second));
                    grid[pos.first+1][pos.second] = 3;
                }

                if(isValid(grid, pos.first, pos.second, pos.first-1, pos.second)) {
                    levelOrder.push(make_pair(pos.first-1, pos.second));
                    grid[pos.first-1][pos.second] = 3;
                }

                if(isValid(grid, pos.first, pos.second, pos.first, pos.second+1)) {
                    levelOrder.push(make_pair(pos.first, pos.second+1));
                    grid[pos.first][pos.second+1] = 3;
                }

                if(isValid(grid, pos.first, pos.second, pos.first, pos.second-1)) {
                    levelOrder.push(make_pair(pos.first, pos.second-1));
                    grid[pos.first][pos.second-1] = 3;
                }
            }
            ++minutesPassed;
        }

        numFresh = 0;
        for(int i = 0; i < grid.size(); ++i) {
            for(int j = 0; j < grid[i].size(); ++j) {
                if(grid[i][j] == 3) grid[i][j] = 1;
                else if(grid[i][j] == 1) ++numFresh;
            }
        }
        if(numFresh > 0) return -1;
        return minutesPassed-1;
    }
};
