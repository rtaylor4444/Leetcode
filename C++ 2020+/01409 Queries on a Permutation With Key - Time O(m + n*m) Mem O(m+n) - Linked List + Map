//Run Time: 16ms - 83.65%
//Memory Usage: 9.9MB - 6.21%
//Solved =)
//Time O(m + n*m) Memory O(m + n)
class LinkedList {
    struct ListNode {
        ListNode *next, *prev;
        int val;
        ListNode(int v) {
            val = v;
            next = prev = nullptr;
        }
    };
    ListNode* head;
    unordered_map<int, ListNode*> valueToNode;
    void detatchNode(ListNode* node) {
        ListNode* prevNode = node->prev; 
        ListNode* nextNode = node->next; 
        if(node == head) head = nextNode;
        if(prevNode) prevNode->next = nextNode;
        if(nextNode) nextNode->prev = prevNode;
        node->prev = node->next = nullptr;
    }
public:
    LinkedList() {
        head = nullptr;
    }
    ~LinkedList() {
        ListNode* curNode = head;
        while(curNode) {
            ListNode* prevNode = curNode;
            curNode = curNode->next;
            delete prevNode;
        }
    }
    void setHead(int value) {
        ListNode* nodeToMove;
        if(valueToNode.find(value) != valueToNode.end()) {
            nodeToMove = valueToNode[value];
            detatchNode(nodeToMove);
        }
        else {
            nodeToMove = new ListNode(value);
            valueToNode.emplace(value, nodeToMove);
        }
        
        if(head) head->prev = nodeToMove;
        nodeToMove->next = head;
        head = nodeToMove;
    }
    int findValuePos(int value) {
        ListNode* curNode = head;
        int pos = 0;
        while(curNode && curNode->val != value) {
            curNode = curNode->next;
            ++pos;
        }
        return (curNode) ? pos : -1;
    }
    void printList() {
        ListNode* curNode = head;
        while(curNode) {
            cout << curNode->val << " ";
            curNode = curNode->next;
        }
        cout << endl;
    }
};

class Solution {
public:
    vector<int> processQueries(vector<int>& queries, int m) {
        LinkedList permutations;
        while(m) {
            permutations.setHead(m--);
        }
        //permutations.printList();
        
        vector<int> results(queries.size(), 0);
        for(int i = 0; i < queries.size(); ++i) {
            results[i] = permutations.findValuePos(queries[i]);
            permutations.setHead(queries[i]);
            //permutations.printList();
        }
        return results;
    }
};
