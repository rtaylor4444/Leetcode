//Run Time: 52ms - 35.97%
//Memory Usage: 34MB - 5.08%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        //reverse in-order?
        if(root == nullptr) return nullptr;
        int prevVal = 0;
        TreeNode* curNode = root;
        stack<TreeNode*> rev_inorder;
        while(curNode || !rev_inorder.empty()) {
            //Populate the stack(right)
            while(curNode) {
                rev_inorder.push(curNode);
                curNode = curNode->right;
            }
            //Process Node
            curNode = rev_inorder.top();
            rev_inorder.pop();
            curNode->val += prevVal;
            prevVal = curNode->val;
            
            //Go left to process those nodes
            curNode = curNode->left;
        }
        return root;
    }
};
