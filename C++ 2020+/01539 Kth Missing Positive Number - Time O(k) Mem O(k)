//Run Time: 4ms - 99.57%
//Memory Usage: 10.3MB - 26.00%
//Solved =)
//k = number of missing positives requested
//(tech k or n which ever one is smaller)
//Time O(k) Memory O(k)
class Solution {
public:
    int findKthPositive(vector<int>& arr, int k) {
        //Linear scan
        //Get the missing positives
        //*If all elements are present just add k to the last element
        //*Loop through and keep track of 1-n once we hit k break the loop
        //k = 5
        //[2,3,4,7,11] - test for 1 doesnt exist, dont iterate => [1]
        //[2,3,4,7,11] - test for 2 exists, so iterate in the array  => [1]
        //[2,3,4,7,11] - test for 5 doesnt exist, dont iterate => [1,5]
        //[2,3,4,7,11] - test for 6 doesnt exist, dont iterate => [1,5,6]
        vector<int> missingPos;
        missingPos.reserve(k);
        int currentPos = 1;
        for(int i = 0; i < arr.size(); ++i) {
            while(arr[i] != currentPos) missingPos.push_back(currentPos++);
            if(missingPos.size() - 1 == k) break;
            ++currentPos;
        }
        //There are no missing positives
        if(missingPos.empty()) return arr[arr.size() - 1] + k;
        //We dont have enough missing positives
        //[11]
        //[1,2,3,4,5,6,7,8,9,10]
        if(missingPos.size() < k) {
            int newOffset = k - (missingPos.size());
            return arr[arr.size() - 1] + newOffset;
        }
        return missingPos[k - 1];
    }
};
