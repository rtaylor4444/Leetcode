//Run Time: 8ms - 81.38%
//Memory Usage: 19.8MB - 81.42%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void preOrder(vector<vector<int>>& solution, vector<int>& curPath, 
                  TreeNode* node, int target, int curSum) {
        curPath.push_back(node->val);
        curSum += node->val;
        //check if node is a leaf
        if(!node->left && !node->right) {
            if(target == curSum) solution.push_back(curPath);
        }
        if(node->left) preOrder(solution, curPath, node->left, target, curSum);
        if(node->right) preOrder(solution, curPath, node->right, target, curSum);
        curPath.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        if(root == nullptr) return {};
        //Pre-Order with backtracking
        vector<vector<int>> solution;
        vector<int> curPath;
        preOrder(solution, curPath, root, targetSum, 0);
        return solution;
    }
};
