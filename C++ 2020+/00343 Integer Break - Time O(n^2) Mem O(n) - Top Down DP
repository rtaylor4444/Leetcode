//Run Time: 0ms - 100.00%
//Memory Usage: 6.6MB - 24.54%
//Solved =)
//Time O(n^2) Memory O(n)
class Solution {
public:
    int topDown(vector<int>& dp, int n) {
        if(dp[n] > 0) return dp[n];
        int localMax = 0;
        for(int i = n-1; i >= 2; --i) {
            int remainingNum = n - i;
            //cout << n << " -> testing " << remainingNum << " * " << i << endl;
            //We can chose to break i or not
            int pickedMax = max(i, topDown(dp, i));
            localMax = max(localMax, remainingNum * pickedMax);
        }
        dp[n] = localMax;
        return localMax;
    }
    int integerBreak(int n) {
        //Given 10 we can choose 2-8 and mult those together
        //break 10 into 2 numbers pick the one that gives best result
        //we pick 8 -> 8 * 2 = 16
        //lets break 8, we pick 6 -> 6 * 2 = 12
        //so: 2 * 2 * 6 = 24
        //lets break 6, we pick 4 -> 4 * 2 = 8
        //so: 2 * 2 * 2 * 4 = 32
        //Formula:
        //we number leftover * max split product of number picked
        //however we can pick between current number or max split
        //so we pick the one that is more
        vector<int> dp(n+1, 0);
        dp[2] = 1; 
        topDown(dp, n);
        return dp[n];
    }
};
