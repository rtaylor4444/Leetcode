//Run Time: 8ms - 80.32%
//Memory Usage: 9.9MB - 79.35%
//Unoptimal Solution - Time needs improvement
//n = size of the array
//Time O(n) Memory O(n)
class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        //Monotonic Stack
        //Iterate the array backwards keeping track
        //of all the meaningful numbers
        //[8,4,6,2,3]
        //i = 4 => 3
        //stack
        //3 = 3 + 0 => 3 we add 0 because our stack is empty
        
        //i = 3 => 2
        //stack: 3
        //the value in our stack does not meet the condition
        //pop 3
        //2 = 2 
        
        //i = 2 => 6
        //stack: 2
        //6 = 6 - 2 = 4 stack value meets condition
        
        //i = 1 => 4
        //stack: 2 6
        //the value in our stack does not meet the condition
        //pop 6
        //4 = 4 - 2 = 2
        
        //i = 0 => 8
        //stack: 2 4
        //8 = 8 - 4 = 4
        //[4,2,4,2,3]
        
        vector<int> newPrices(prices);
        stack<int> monoStack;
        for(int i = prices.size() - 1; i >= 0; --i) {
            //if the value in our stack does not meet the condition
            //pop it off (no way it will meet condition for future checks)
            while(!monoStack.empty() && prices[i] < monoStack.top()) {
                monoStack.pop();
            }
            newPrices[i] -= monoStack.empty() ? 0 : monoStack.top();
            monoStack.push(prices[i]);
        }
        return newPrices;
    }
};
