//Run Time: 56ms - 95.57%
//Memory Usage: 45MB - 73.55%
//Solved =)
//Time O(n) Memory O(n)
class Trie {
    struct TrieNode {
        TrieNode* children[26];
        bool isWord;
        TrieNode() {
            for(int i = 0; i < 26; ++i)
                children[i] = nullptr;
            isWord = false;
        }
        ~TrieNode() {
            for(int i = 0; i < 26; ++i)
                delete children[i];
        }
    };
    TrieNode *root, *curNode;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        curNode = root;
        for(int i = 0; i < word.size(); ++i) {
            if(!curNode->children[word[i] - 'a'])
                curNode->children[word[i] - 'a'] = new TrieNode();
            
            curNode = curNode->children[word[i] - 'a'];
        }
        curNode->isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        curNode = root;
        for(int i = 0; i < word.size(); ++i) {
            if(!curNode->children[word[i] - 'a']) return false;
            
            curNode = curNode->children[word[i] - 'a'];
        }
        return curNode->isWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        curNode = root;
        for(int i = 0; i < prefix.size(); ++i) {
            if(!curNode->children[prefix[i] - 'a']) return false;
            
            curNode = curNode->children[prefix[i] - 'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
