//Run Time: 38ms - 97.06%
//Memory Usage: 22.1MB - 98.04%
//Solved =)
//Time O(1) Memory O(n)

class PhoneDirectory {
    vector<bool> takenNumbers;
    vector<int> availableNumbers;
public:
    PhoneDirectory(int maxNumbers) {
        takenNumbers = vector<bool>(maxNumbers, false);
        availableNumbers = vector<int>();
        availableNumbers.reserve(maxNumbers);
        for(int i = 0; i < maxNumbers; ++i)
            availableNumbers.push_back(i);
    }
    
    int get() {
        if(availableNumbers.empty()) return -1;
        int assignedNumber = availableNumbers.back();
        availableNumbers.pop_back();
        takenNumbers[assignedNumber] = true;
        return assignedNumber;
    }
    
    bool check(int number) {
        if(number < 0 or number >= takenNumbers.size()) return false;
        return !takenNumbers[number];
    }
    
    void release(int number) {
        if(!takenNumbers[number]) return;
        takenNumbers[number] = false;
        availableNumbers.push_back(number);
    }
};

/**
 * Your PhoneDirectory object will be instantiated and called as such:
 * PhoneDirectory* obj = new PhoneDirectory(maxNumbers);
 * int param_1 = obj->get();
 * bool param_2 = obj->check(number);
 * obj->release(number);
 */
