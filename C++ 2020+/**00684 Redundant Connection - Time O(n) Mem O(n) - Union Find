//Run Time: 8ms - 97.53%
//Memory Usage: 9.4MB - 43.48%
//Solved =)
//Time O(n) Memory O(n)
class UnionFind {
    vector<int> dsu, size;
public:
    UnionFind(vector<vector<int>>& edges) {
        dsu = vector<int>(edges.size()+1, 0);
        size = vector<int>(edges.size()+1, 1);
        for(int i = 0; i < dsu.size(); ++i) {
            dsu[i] = i;
        }
    }
    
    bool unite(int node1, int node2) {
        //These are already united
        int root1 = find(node1), root2 = find(node2);
        if(root1 == root2)
            return false;
        
        //Check component size - merge smaller component to larger one
        //Otherwise just make node1 a parent of node2
        if(size[root2] > size[root1]) {
            //cout << "merging " << node1 << " with " << node2 << endl;
            dsu[root1] = root2;
            size[root1] += size[root2];
        }
        else {
            //cout << "merging " << node2 << " with " << node1 << endl;
            dsu[root2] = root1; 
            size[root2] += size[root1];
        }
        return true;
    }
    
    int find(int node) {
        //Follow the path to our root node
        int root = dsu[node];
        while(root != dsu[root]) {
            root = dsu[root];
        }

        //compress the path for future O(1) lookup
        while(dsu[node] != root) {
            int prevNode = node;
            node = dsu[node];
            dsu[prevNode] = root;
            size[prevNode] = size[root];
        }
        return root;
    }
};
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        //Union Find
        UnionFind unionFind(edges);
        vector<int> edgeToRemove;
        for(int i = 0; i < edges.size(); ++i) {
            if(!unionFind.unite(edges[i][0], edges[i][1]))
                edgeToRemove = edges[i];
        }
        return edgeToRemove;
    }
};
