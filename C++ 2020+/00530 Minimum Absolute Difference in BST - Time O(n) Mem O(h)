//Run Time: 20ms - 96.17%
//Memory Usage: 25.3MB - 55.93%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int getMinimumDifference(TreeNode* root) {
        //For each node I check against all other nodes
        //If I find a 0 difference I can short curcuit making iterative better
        //in order traversal 1 2 3
        stack<TreeNode*> inorder;
        TreeNode* curNode = root;
        int minDiff = INT_MAX, prevValue = -1, curValue;
        while(curNode || !inorder.empty()) {
            //Populate the stack
            while(curNode) {
                inorder.push(curNode);
                curNode = curNode->left;
            }
            
            //Process the node
            curNode = inorder.top();
            inorder.pop();
            
            curValue = curNode->val;
            if(prevValue >= 0) minDiff = min(minDiff, abs(curValue - prevValue));
            //If we find smallest possible value we can stop searching
            if(minDiff == 0) break;
            prevValue = curValue;
            
            //Go and process right subtree if it exists
            curNode = curNode->right;
            
        }
        return minDiff;
    }
};
