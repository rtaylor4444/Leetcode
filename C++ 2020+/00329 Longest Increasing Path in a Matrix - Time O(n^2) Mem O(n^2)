//Run Time: 44ms - 83.57%
//Memory Usage: 16.5MB - 50.16%
//Solved =)
//Time O(n^2) Memory O(n^2)
class Solution {
    vector<vector<int>> dir;
public:
    Solution() {
        dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    }
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& dp, int i, int j) {
        //Return cached value
        if(dp[i][j] > 0) return dp[i][j];
        int localMaxPath = 0;
        for(int d = 0; d < dir.size(); ++d) {
            //Bounds Check
            int nextI = i+dir[d][0], nextJ = j+dir[d][1];
            if(nextI < 0 || nextI >= matrix.size()) continue;
            if(nextJ < 0 || nextJ >= matrix[0].size()) continue;
            //This value must be smaller
            if(matrix[i][j] >= matrix[nextI][nextJ]) continue;
            localMaxPath =  max(localMaxPath, dfs(matrix, dp, nextI, nextJ));
        }
        dp[i][j] = localMaxPath + 1;
        return dp[i][j];
    }
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        //DFS + Dynamic Programming
        int longestPath = 1;
        vector<vector<int>> dp(matrix.size(), vector<int>(matrix[0].size(), 0));
        for(int i = 0; i < matrix.size(); ++i) {
            for(int j = 0; j < matrix[i].size(); ++j) {
                longestPath = max(longestPath, dfs(matrix, dp, i, j));
            }
        }
        return longestPath;
    }
};
