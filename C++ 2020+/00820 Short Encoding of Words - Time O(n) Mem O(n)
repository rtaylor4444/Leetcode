//Run Time: 84ms - 72.02%
//Memory Usage: 77.2MB - 8.75%
//Solved =)
//n = number of words
//Time O(n) Memory O(n)

struct TrieNode {
    TrieNode* children[26];  
    TrieNode() {
        for(int i = 0; i < 26; ++i)
            children[i] = nullptr;
    }
    ~TrieNode() {
        for(int i = 0; i < 26; ++i)
            if(children[i]) delete children[i];
    }
};

class Trie {
    TrieNode* root, *curNode;
    unordered_map<TrieNode*, int> leafToSize;
public:
    Trie() {
        root = new TrieNode();
    }
    void addWord(string& word) {
        curNode = root;
        bool isLeaf = false;
        for(int i = word.size() - 1; i >= 0; --i) {
            if(curNode->children[word[i] - 'a'] == nullptr) {
                curNode->children[word[i] - 'a'] = new TrieNode();
                isLeaf = true;
            }
            leafToSize.erase(curNode);
            curNode = curNode->children[word[i] - 'a'];
        }
        if(isLeaf) leafToSize.emplace(curNode, (int)word.size() + 1);
    }
    int getEncodingSize() { 
        int sizeCount = 0;
        for(auto it = leafToSize.begin(); it != leafToSize.end(); ++it) {
            sizeCount += it->second;
        }
        return sizeCount;
    }
};

class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        Trie trie;
        for(int i = 0; i < words.size(); ++i) {
            trie.addWord(words[i]);
        }
        return trie.getEncodingSize();
    }
};
