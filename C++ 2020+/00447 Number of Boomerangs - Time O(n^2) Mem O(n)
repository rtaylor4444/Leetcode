//Run Time: 1012ms - 49.80%
//Memory Usage: 105MB - 77.31%
//Solved =)
//Time O(n^2) Memory O(n)
class Solution {
public:
    int getDistance(vector<int>& A, vector<int>& B) {
        //Distance between two points
        int x = A[0] - B[0];
        x *= x;
        int y = A[1] - B[1];
        y *= y;
        return x + y;
    }
    int numberOfBoomerangs(vector<vector<int>>& points) {
        //abs(i - j) == abs(i - k)
        //(i, j, k)
        //Variation of 3 sum problem
        //Compare every three pairs?
        //n^3 - brute force
        //n?? - hash map storing all
        //n?? - sorting points somehow
        //Brute Force - n^3
        //Calc each point distance from origin
        //modify based on i's distance from origin
        //we want a negative value and a positive one
        int totalBoomerangs = 0;
        for(int i = 0; i < points.size(); ++i) {
            //dist -> count
            unordered_map<int, int> distToI(points.size());
            //Fill up hashmap with the dist of all possible points
            for(int j = 0; j < points.size(); ++j) {
                if(i == j) continue;
                int ItoJ = getDistance(points[i], points[j]);
                if(distToI.find(ItoJ) == distToI.end())
                    distToI.emplace(ItoJ, 0);
                
                distToI[ItoJ]++;
            }
            
            //Iterate through hash and see which two points have the same distance
            for(auto it = distToI.begin(); it != distToI.end(); ++it) {
                if(it->second > 1) {
                 // number of ways to select 2 from n = 
                 // nP2 = n!/(n - 2)! = n * (n - 1)
                  totalBoomerangs += it->second * (it->second - 1);
                }
            }
        }
        return totalBoomerangs;
    }
};
