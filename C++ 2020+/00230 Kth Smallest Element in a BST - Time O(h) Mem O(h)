//Run Time: 16ms - 97.33%
//Memory Usage: 24.1MB - 96.96%
//Solved =)
//Time O(k) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        //Iterative In-Order since short circut
        int numNodesSeen = 1;
        stack<TreeNode*> inOrder;
        TreeNode* curNode = root;
        while(curNode || !inOrder.empty()) {
            while(curNode) {
                inOrder.push(curNode);
                curNode = curNode->left;
            }
            
            curNode = inOrder.top();
            inOrder.pop();
            
            if(numNodesSeen++ == k)
                break;
            
            curNode = curNode->right;
        }
        return curNode->val;
    }
};
