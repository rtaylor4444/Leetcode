//Run Time: 20ms - 99.29%
//Memory Usage: 17.7MB - 78.48%
//Solved =)
//Time O(1) Memory O(n)
class TicTacToe {
    int winner, numTiles;
    //vector<vector<int>> board;
    vector<int> rowCount, colCount;
    int diag1Count, diag2Count;
public:
    /** Initialize your data structure here. */
    TicTacToe(int n) {
        winner = 0;
        numTiles = n;
        //board = vector<vector<int>>(n, vector<int>(n, 0));
        rowCount = vector<int>(n, 0);
        colCount = vector<int>(n, 0);
        diag1Count = 0;
        diag2Count = 0;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    int move(int row, int col, int player) {
        //Once winning condition is reached no more moves allowed
        if(winner) return winner;
        //move is always on a empty block
        //board[row][col] = player;
        int inc = (player == 1) ? 1 : -1;
        //Horizontal check
        rowCount[row] += inc;
        if(rowCount[row] == numTiles * inc) {
            winner = player;
        }
        //Vertical check
        colCount[col] += inc;
        if(colCount[col] == numTiles * inc) {
            winner = player;
        }
        //Diagnol 1 check = 
        if(row == col) {
            diag1Count += inc;
            if(diag1Count == numTiles * inc) {
                winner = player;
            }
        }
        //Diagnol 2 check = 
        if((row + col) == numTiles - 1) {
            diag2Count += inc;
            if(diag2Count == numTiles * inc) {
                winner = player;
            }
        }
        return winner;
    }
};

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe* obj = new TicTacToe(n);
 * int param_1 = obj->move(row,col,player);
 */
