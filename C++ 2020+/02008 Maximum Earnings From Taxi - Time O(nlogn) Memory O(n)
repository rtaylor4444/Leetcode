//Run Time: 429ms - 71.83%
//Memory Usage: 107.1MB - 44.97%
//Solved =)
//Time O(nlogn) Memory O(n)

class Solution {
public:
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        //Dynamic Programming
        //sort passangers by start
        //[[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
        //           i
        //     j
        // 0 0 0 0 0 7
        // 0 1 2 3 4 5
        //for every passenger that we can pick:
        //dp[end] = max(dp[end], dp[j-1] + end - start + tip)
        //after every iteration:
        //dp[j] = max(dp[j-1], dp[j]);
        sort(rides.begin(), rides.end());
        vector<long> dp(n+1, 0);
        int rideIndex = 0;
        for(int i = 1; i <= n; ++i) {
            dp[i] = max(dp[i-1], dp[i]);
            while(rideIndex < rides.size()) {
                if(rides[rideIndex][0] > i) break;
                int profit = (rides[rideIndex][1] - rides[rideIndex][0]) + rides[rideIndex][2];
                dp[rides[rideIndex][1]-1] = max(dp[rides[rideIndex][1]-1], dp[rides[rideIndex][0]-1] + profit);
                ++rideIndex;
            }
        }
        return dp[n];
    }
};
