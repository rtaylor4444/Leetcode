//Run Time: 4ms - 73.30%
//Memory Usage: 10MB - 55.85%
//Solved =)
//n = number of nodes
//h = hieght of the tree
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int curValue;
public:
    bool isUnivalTreeHelper(TreeNode* node) {
        if(!node) return true;
        if(node->val != curValue)
            return false;
        
        return isUnivalTreeHelper(node->left) && isUnivalTreeHelper(node->right);
    }
    bool isUnivalTree(TreeNode* root) {
        curValue = root->val;
        return isUnivalTreeHelper(root);
    }
};
