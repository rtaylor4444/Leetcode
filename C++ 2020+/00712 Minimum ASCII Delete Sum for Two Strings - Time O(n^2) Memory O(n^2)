//Run Time: 41ms - 38.78%
//Memory Usage: 15.5MB - 54.94%
//Solved =)
//Time O(n^2) Memory O(n^2)

class Solution {
public:
    int topDown(string& s1, string& s2, vector<vector<int>>& memo, int p1, int p2) {
        //Exit when we reach the end of the string
        if(p1 >= s1.size() and p2 >= s2.size()) return 0;
        if(memo[p1][p2] != INT_MAX) return memo[p1][p2];
        //skip if characters are equal
        if(s1[p1] == s2[p2]) return topDown(s1, s2, memo, p1+1, p2+1);
        //otherwise test both options
        int sum1 = (p1 < s1.size()) ? s1[p1] + topDown(s1, s2, memo, p1+1, p2) : INT_MAX;
        int sum2 = (p2 < s2.size()) ? s2[p2] + topDown(s1, s2, memo, p1, p2+1) : INT_MAX;
        memo[p1][p2] = min(sum1, sum2);
        return memo[p1][p2];
    } 
    int minimumDeleteSum(string s1, string s2) {
        //Dynamic Programming - Edit Distance
        //vector<vector<int>> memo(s1.size()+1, vector<int>(s2.size()+1, INT_MAX));
        //return topDown(s1, s2, memo, 0, 0);
        vector<vector<int>> dp(s1.size()+1, vector<int>(s2.size()+1, 0));
        //base cases - delete all characters to match empty string
        for(int i = 0; i < s1.size(); ++i) dp[i+1][0] = dp[i][0] + s1[i];
        //base cases - delete all characters to match empty string
        for(int j = 0; j < s2.size(); ++j) dp[0][j+1] = dp[0][j] + s2[j];
        //test all other characters
        for(int i = 1; i < dp.size(); ++i) {
            for(int j = 1; j < dp[i].size(); ++j) {
                //skip if characters are equal
                if(s1[i-1] == s2[j-1]) {
                    dp[i][j] = dp[i-1][j-1];
                    continue;
                }
                int sum1 = s1[i-1] + dp[i-1][j];
                int sum2 = s2[j-1] + dp[i][j-1];
                dp[i][j] = min(sum1, sum2);
            }
        }
        return dp[s1.size()][s2.size()];
    }
};
