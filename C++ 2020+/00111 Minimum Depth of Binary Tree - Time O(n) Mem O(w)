//Run Time: 12ms - 92.28%
//Memory Usage: 19.7MB - 98.77%
//Solved =)
//Time O(n) Memory O(w)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr) return 0;
        //BFS the first leaf node we encounter is the min depth
        TreeNode* curNode;
        int curDepth = 1;
        queue<pair<TreeNode*, int>> levelOrder;
        levelOrder.push({root, curDepth});
        
        while(!levelOrder.empty()) {
            curNode = levelOrder.front().first;
            curDepth = levelOrder.front().second;
            levelOrder.pop();
            
            if(curNode->left == nullptr && curNode->right == nullptr)
                break;
            
            if(curNode->left) levelOrder.push({curNode->left, curDepth+1});
            if(curNode->right) levelOrder.push({curNode->right, curDepth+1});
        }
        return curDepth;
    }
};
