//Run Time: 20ms - 75.82%
//Memory Usage: 12.3MB - 60.67%
//Solved =)
//Time O(nlogn) Memory O(n)
struct MeetingSort {
    bool operator()(vector<int>& a, vector<int>& b) {
        return (a[1] > b[1]);
    }
};

class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        //Priority Queue
        //Sort meetings by start time
        //-Ensures our meeting in pq start before us
        //Place in queue based on earlier end time
        //-We know all other meetings wont be free if the first one isnt
        sort(intervals.begin(), intervals.end());
        priority_queue<vector<int>, vector<vector<int>>, MeetingSort> p_q;
        p_q.push(intervals[0]);
        for(int i = 1; i < intervals.size(); ++i) {
            if(p_q.top()[1] <= intervals[i][0])
                p_q.pop();
            p_q.push(intervals[i]);
        }
        return p_q.size();
    }
};
