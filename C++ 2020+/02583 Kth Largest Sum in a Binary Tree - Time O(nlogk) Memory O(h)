//Run Time: 101ms - 98.29%
//Memory Usage: 100.28MB - 81.87%
//Solved =)
//Time O(nlogk) Memory O(h)
//h = height of the tree
//n = number of nodes

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    Solution() {
        cin.tie(NULL);
        cout.tie(NULL);
        ios_base :: sync_with_stdio(false);
    }
    long long kthLargestLevelSum(TreeNode* root, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> pq;
        queue<TreeNode*> bfs;
        bfs.push(root);
        long long largestKSum = 0;
        int numLevels = 0;
        while(!bfs.empty()) {
            long long curSum = 0;
            for(int i = bfs.size()-1; i >= 0; --i) {
                TreeNode* curNode = bfs.front();
                bfs.pop();

                curSum += curNode->val;
                if(curNode->left) bfs.push(curNode->left);
                if(curNode->right) bfs.push(curNode->right);
            }
            ++numLevels;
            pq.push(curSum);
            if(pq.size() > k) pq.pop();
        }
        if(numLevels < k) return -1;
        return pq.top();
    }
};
