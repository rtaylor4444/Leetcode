//Run Time: 0ms - 100.00%
//Memory Usage: 8.2MB - 10.94%
//Solved =)
//Time O(n) Memory O(n)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* getSuccessor(TreeNode* node) {
        TreeNode* succ = node->left;
        while(succ->right && succ->right != node) {
            succ = succ->right;
        }
        return succ;
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> inOrder;
        TreeNode* curNode = root;
        while(curNode) {
            if(curNode->left) {
                TreeNode* succ = getSuccessor(curNode);
                //Establish link
                if(succ->right == nullptr) {
                    succ->right = curNode;
                    curNode = curNode->left;
                }
                //Break Link
                else {
                    inOrder.push_back(curNode->val);
                    curNode = curNode->right;
                    succ->right = nullptr;
                }
            }
            //finished left subtree
            else {
                inOrder.push_back(curNode->val);
                curNode = curNode->right;
            }
        }
        return inOrder;
    }
};
