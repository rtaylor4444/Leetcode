//Run Time: 20ms - 83.22%
//Memory Usage: 13.1MB - 75.56%
//Solved =)
//n = size of arr1 and arr2
//Time O(nlogn) Memory O(1)
class Solution {
public:
    bool isDistanceValue(int num, int d, vector<int>& arr2) {
        //Search our range
        //8 => [1,8,9,10]
        int l = 0;
        int r = arr2.size() - 1;
        while(l <= r) {
            int m = l + ((r - l) / 2);
            //Exit Condition
            int curDist = num-arr2[m];
            if(abs(curDist) <= d) return false;
            //If our distance is negative try greater numbers
            if(curDist > 0)
                l = m + 1;
            else
                r = m - 1;
        }
        return true;
    }
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
        //Sort array 2
        //Count sort - limit is 2001 - neg are possible
        //two indexes that meet the property
        //Binary Search to find values
        // arr[i] - d
        // 8 - 2 = 6
        // arr[i] + d
        // 8 + 2 = 10
        /*vector<int> countSort(4001, 0);
        for(int i = 0; i < arr2.size(); ++i) {
            countSort[2000+arr2[i]]++;
        }
        int curIndex = 0;
        for(int i = 0; i < 4001; ++i) {
            while(countSort[i] > 0) {
                arr2[curIndex] = i - 2000;
                ++curIndex;
                countSort[i]--;
            }
        }*/
        sort(arr2.begin(), arr2.end());
        
        int numIndices = 0;
        for(int i = 0; i < arr1.size(); ++i) {
            if(isDistanceValue(arr1[i], d, arr2))
                ++numIndices;
        }
        return numIndices;
    }
};
