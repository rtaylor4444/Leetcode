//Run Time: 0ms - 100.00%
//Memory Usage: 39.1MB - 79.91%
//Solved =)
//Time O(n) Memory O(1)
class Solution {
public:
    bool compareWords(string& a, string& b, vector<int>& charToPlacement) {
        int i = 0;
        while(i < a.size() && i < b.size()) {
            if(charToPlacement[a[i] - 'a'] > charToPlacement[b[i] - 'a'])
                return false;
            else if(charToPlacement[a[i] - 'a'] < charToPlacement[b[i] - 'a'])
                return true;
            
            ++i;
        }
        return (a.size() <= b.size());
    }
    bool isAlienSorted(vector<string>& words, string order) {
        //sort a copy words and compare it to the original
        //Or iterate thourh words and check them two at a time
        //ex. check index 0 and 1, 1 and 2 etc..
        vector<int> charToPlacement(26, 0);
        for(int i = 0; i < order.size(); ++i) {
            charToPlacement[order[i] - 'a'] = i;
        }
        
        for(int i = 0; i < words.size() - 1; ++i) {
            if(!compareWords(words[i], words[i+1], charToPlacement))
                return false;
        }
        return true;
    }
};
