//Run Time: 224ms - 80.93%
//Memory Usage: 39.1MB - 87.89%
//Solved =)
//Time O(n) Memory O(n)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //Sliding Window max
        //O(nk) easily
        //Monotonic Queue
        //Idea is to keep track of the maximum index
        vector<int> maximums;
        deque<int> monoQueue;
        for(int i = 0; i < nums.size(); ++i) {
            //Remove all elements less than or equal to this one
            while(!monoQueue.empty() && nums[i] >= nums[monoQueue.back()])
                monoQueue.pop_back();
            monoQueue.push_back(i);
            
            //Check an make sure this isnt outside our window
            int curIndex = monoQueue.front();
            if(curIndex <= i - k) monoQueue.pop_front();
            
            if(!monoQueue.empty() && i+1 >= k) maximums.push_back(nums[monoQueue.front()]);
        }
        return maximums;
    }
};
