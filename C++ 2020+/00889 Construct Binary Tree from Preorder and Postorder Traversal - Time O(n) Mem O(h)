//Run Time: 12ms - 91.90%
//Memory Usage: 26MB - 7.36%
//Solved =)
//Time O(n) Memory O(h)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructTree(vector<int>& pre, int& preIndex, vector<int>& post, int& postIndex) {
        //bounds check
        if(preIndex >= pre.size()) return nullptr;
        TreeNode* curNode = new TreeNode(pre[preIndex++]);
        //Does this node match our post order?
        //If so stop recursion flow
        if(curNode->val != post[postIndex])
            curNode->left = constructTree(pre, preIndex, post, postIndex);
        if(curNode->val != post[postIndex])
            curNode->right = constructTree(pre, preIndex, post, postIndex);
        //Update our post position
        ++postIndex;
        return curNode;
    }
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        //pre order traversal must be used
        //iterate through pre array
        //use post array to guide the recursion somehow
        int preIndex = 0, postIndex = 0;
        return constructTree(pre, preIndex, post, postIndex);
    }
};
