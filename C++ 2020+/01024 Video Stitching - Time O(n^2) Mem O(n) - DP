//Run Time: 8ms - 16.00%
//Memory Usage: 8.4MB - 8.60%
//Unoptimal Solution - Time/Memory needs improvement
//Time O(n^2) Memory O(n)
class Solution {
public:
    int videoStitching(vector<vector<int>>& clips, int T) {
        //Sort the clips by start time
        //for each clip pick the one we can stitch and has the most
        //end time
        if(T == 0) return 0;
        sort(clips.begin(), clips.end());
        vector<int> nextStitch(clips.size(), 0);
        for(int i = 0; i < clips.size(); ++i) {
            nextStitch[i] = i;
            for(int j = i+1; j < clips.size(); ++j) {
                //Check if we can use this stitch
                if(clips[i][1] < clips[j][0]) continue;
                //Ensure this stitch is better than the previous one
                vector<int> curNextStitch = clips[nextStitch[i]];
                if(curNextStitch[1] >= clips[j][1]) continue;
                nextStitch[i] = j;
            }
        }
        
        //Try to construct a full 0-T clip list
        int minClips = INT_MAX;
        for(int i = 0; i < clips.size(); ++i) {
            //As soon as we find a clip who start past 0 exit
            if(clips[i][0] > 0) break;
            int curClip = i, curLength = 1;
            while(curClip != nextStitch[curClip]) {
                if(clips[curClip][1] >= T) break;
                curClip = nextStitch[curClip];
                ++curLength;
            }
            if(clips[curClip][1] >= T) minClips = min(minClips, curLength);
        }
        return minClips == INT_MAX ? -1 : minClips;
    }
};
