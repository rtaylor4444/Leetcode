//Run Time: 24ms - 91.22%
//Memory Usage: 28.8MB - 98.69%
//Solved =)
//Time O(n) Memory O(1)
//Useful link:
//https://csactor.blogspot.com/2018/08/dsw-day-stout-warren-algorithm-dsw.html
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void leftRotate(TreeNode *node, int i) {
      TreeNode* curNode = node->right;
      while (i-- > 0) {
        TreeNode* old_node = curNode;
        curNode = curNode->right;
        node->right = curNode;
        old_node->right = curNode->left;
        curNode->left = old_node;
        node = curNode;
        curNode = curNode->right;
      }
    } 
    
    TreeNode* sortedListToBST(ListNode* head) {
        //Create vine or backbone
        ListNode *curNode = head;
        TreeNode dummyRoot, *curTreeNode = &dummyRoot;
        int nodeCount = 0;
        while(curNode) {
            curTreeNode->right = new TreeNode(curNode->val);
            curNode = curNode->next;
            curTreeNode = curTreeNode->right;
            ++nodeCount;
        }
        //calc required nodes for a balanced tree
        int numNodesInBalance = pow(2, int(log2(nodeCount + 1))) - 1;
        //Initally rotate left by node difference times
        leftRotate(&dummyRoot, nodeCount - numNodesInBalance);
        //Perform remaining rotations on every second nude
        for (int i = numNodesInBalance / 2; i > 0; i /= 2)
            leftRotate(&dummyRoot, i);
        
        return dummyRoot.right;
    }
};
