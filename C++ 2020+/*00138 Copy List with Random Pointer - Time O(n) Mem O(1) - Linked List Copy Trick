//Run Time: 4ms - 98.26%
//Memory Usage: 11.2MB - 76.86%
//Solved =)
//Time O(n) Memory O(1)
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        //Interweave lists
        Node* curNode = head, *dummyNode = new Node(0), *curNewNode;
        while(curNode) {
            Node* nextNode = curNode->next;
            curNode->next = new Node(curNode->val);
            //Set new created node
            curNode->next->random = curNode->random;
            curNode->next->next = nextNode;
            //Advance pointer
            curNode = nextNode;
        }
        
        //Fix random pointers
        curNode = head;
        while(curNode) {
            curNode = curNode->next;
            if(curNode->random) curNode->random = curNode->random->next;
            curNode = curNode->next;
        }
        
        curNode = head;
        curNewNode = dummyNode;
        //Retrive copy
        while(curNode) {
            //Grab copied node
            curNewNode->next = curNode->next;
            curNewNode = curNewNode->next;
            //Fix orginal list
            curNode->next = curNewNode->next;
            curNode = curNode->next;
        }
        curNewNode = dummyNode->next;
        delete dummyNode;
        return curNewNode;
    }
};
