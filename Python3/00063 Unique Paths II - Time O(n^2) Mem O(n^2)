class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        # Dynamic Programming - Bottom Up
        # Init our dp array O(n) optimized space
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp: List[int] = []
        for i in range(m):
            dp.append([0] * n)
        
        
        # Set initial top row
        dp[0][0] = obstacleGrid[0][0] ^ 1;
        for i in range(1, n):
            if obstacleGrid[0][i] == 1:
                break

            dp[0][i] = dp[0][i-1]
            
        # Set inital right column
        for i in range (1, m):
            if obstacleGrid[i][0] == 1:
                break
                
            dp[i][0] = dp[i-1][0]
            
        for i in range(1, m):
            for j in range(1, n):
                # Skip if we find an obstacle
                if obstacleGrid[i][j] == 1:
                    continue
                    
                # Add previous steps from up and left  
                dp[i][j] += dp[i][j-1] + dp[i-1][j]
                    
        return dp[m-1][n-1]
