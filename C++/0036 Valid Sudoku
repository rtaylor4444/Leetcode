class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        //HashSet
        //Step 1: Use a hashset for each row, column and matrix
        //to check and see if there is a duplicate, if there is we return false
        //Step 2: iterate through our board adding items to our set accordingly
        unordered_set<char> rows[9];
        unordered_set<char> columns[9];
        unordered_set<char> matrix[9];
        int mIndex;
        char num;
        
        for( unsigned int i = 0; i < board.size(); i++) {
            for( unsigned int k = 0; k < board[i].size(); k++ ) {
                num = board[i][k];
                //skip invalid characters
                if(num == '.') continue;
                
                //check row
                if(rows[i].find(num) != rows[i].end()) return false;
                rows[i].emplace(num);

                //check column
                if(columns[k].find(num) != columns[k].end()) return false;
                columns[k].emplace(num);
                
                //check matrix
                mIndex = (k / 3) + ((i / 3) * 3);
                //cout << i << ", " << k << " goes into matrix of: " << mIndex << endl;
                if(matrix[mIndex].find(num) != matrix[mIndex].end()) return false;
                matrix[mIndex].emplace(num);
                
                //k: 0-2 = 0, 3-5 = 1, 6-8 = 2
                //0+0, 0+1, 0+2
                //3+0, 3+1, 3+2
                //6+0, 6+1, 6+2
            }
        }       
        return true;
    }
};
